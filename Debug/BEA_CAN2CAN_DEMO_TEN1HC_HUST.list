
BEA_CAN2CAN_DEMO_TEN1HC_HUST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080063d8  080063d8  000073d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006560  08006560  000080b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006568  08006568  000080b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006570  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080b4  2**0
                  CONTENTS
 10 .bss          0000270c  200000b4  200000b4  000080b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200027c0  200027c0  000080b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c23b  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a8  00000000  00000000  0001431f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  000166c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000787  00000000  00000000  000170b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208d2  00000000  00000000  0001783f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2ca  00000000  00000000  00038111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcd7a  00000000  00000000  000463db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103155  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000321c  00000000  00000000  00103198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009d  00000000  00000000  001063b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063c0 	.word	0x080063c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	080063c0 	.word	0x080063c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <CAN_TP2DCM>:
	Gen_Ramdom_Seed,
	Compare_Key
};

void CAN_TP2DCM(uint32_t CANID, uint8_t TransBuffer[])
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	uint8_t LoopIndx;
	uint8_t temSID;
	uint8_t sidFound;

	LoopIndx = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
	temSID = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	737b      	strb	r3, [r7, #13]
	sidFound = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73bb      	strb	r3, [r7, #14]

	if(DCM_NEW_REQ == 1)
 8000576:	4b91      	ldr	r3, [pc, #580]	@ (80007bc <CAN_TP2DCM+0x25c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d102      	bne.n	8000584 <CAN_TP2DCM+0x24>
	{
		/*confirm new request is ready*/
		DCM_NEW_REQ = 0;
 800057e:	4b8f      	ldr	r3, [pc, #572]	@ (80007bc <CAN_TP2DCM+0x25c>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
	}

	if(DCM_NEW_REQ == 0)
 8000584:	4b8d      	ldr	r3, [pc, #564]	@ (80007bc <CAN_TP2DCM+0x25c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	f040 81a7 	bne.w	80008dc <CAN_TP2DCM+0x37c>
	{
		/*init Dcm State*/
		Dcm_Msg_Info_s.protoID = CANID ;
 800058e:	4b8c      	ldr	r3, [pc, #560]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60d3      	str	r3, [r2, #12]
		Dcm_Msg_Info_s.respType = DCM_NORESP;
 800059a:	4b89      	ldr	r3, [pc, #548]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800059c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005a0:	2200      	movs	r2, #0
 80005a2:	721a      	strb	r2, [r3, #8]

		if(TransBuffer[0] == 0)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d105      	bne.n	80005b8 <CAN_TP2DCM+0x58>
		{
			Dcm_Msg_Info_s.respType = DCM_NORESP;
 80005ac:	4b84      	ldr	r3, [pc, #528]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80005ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005b2:	2200      	movs	r2, #0
 80005b4:	721a      	strb	r2, [r3, #8]
				Dcm_Msg_Info_s.respType = DCM_NORESP;
				DCM_NEW_REQ = 1;
			}
		}
	}
}
 80005b6:	e191      	b.n	80008dc <CAN_TP2DCM+0x37c>
		else if(Dcm_Msg_Info_s.protoID != ProtocolI_RX)
 80005b8:	4b81      	ldr	r3, [pc, #516]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80005ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	4b80      	ldr	r3, [pc, #512]	@ (80007c4 <CAN_TP2DCM+0x264>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d005      	beq.n	80005d4 <CAN_TP2DCM+0x74>
			Dcm_Msg_Info_s.respType = DCM_NORESP;
 80005c8:	4b7d      	ldr	r3, [pc, #500]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80005ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005ce:	2200      	movs	r2, #0
 80005d0:	721a      	strb	r2, [r3, #8]
}
 80005d2:	e183      	b.n	80008dc <CAN_TP2DCM+0x37c>
			switch(TransBuffer[0] & 0xF0)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80005dc:	2b30      	cmp	r3, #48	@ 0x30
 80005de:	d016      	beq.n	800060e <CAN_TP2DCM+0xae>
 80005e0:	2b30      	cmp	r3, #48	@ 0x30
 80005e2:	dc20      	bgt.n	8000626 <CAN_TP2DCM+0xc6>
 80005e4:	2b20      	cmp	r3, #32
 80005e6:	d018      	beq.n	800061a <CAN_TP2DCM+0xba>
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	dc1c      	bgt.n	8000626 <CAN_TP2DCM+0xc6>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <CAN_TP2DCM+0x96>
 80005f0:	2b10      	cmp	r3, #16
 80005f2:	d006      	beq.n	8000602 <CAN_TP2DCM+0xa2>
				default:          {                                        break;}
 80005f4:	e017      	b.n	8000626 <CAN_TP2DCM+0xc6>
				case DCM_SG_FRAME:{Dcm_Msg_Info_s.transType = DCM_SG_FRAME;break;}
 80005f6:	4b72      	ldr	r3, [pc, #456]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80005f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80005fc:	2200      	movs	r2, #0
 80005fe:	725a      	strb	r2, [r3, #9]
 8000600:	e012      	b.n	8000628 <CAN_TP2DCM+0xc8>
				case DCM_FS_FRAME:{Dcm_Msg_Info_s.transType = DCM_FS_FRAME;break;}
 8000602:	4b6f      	ldr	r3, [pc, #444]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000608:	2210      	movs	r2, #16
 800060a:	725a      	strb	r2, [r3, #9]
 800060c:	e00c      	b.n	8000628 <CAN_TP2DCM+0xc8>
				case DCM_FC_FRAME:{Dcm_Msg_Info_s.transType = DCM_FC_FRAME;break;}
 800060e:	4b6c      	ldr	r3, [pc, #432]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000614:	2230      	movs	r2, #48	@ 0x30
 8000616:	725a      	strb	r2, [r3, #9]
 8000618:	e006      	b.n	8000628 <CAN_TP2DCM+0xc8>
				case DCM_CC_FRAME:{Dcm_Msg_Info_s.transType = DCM_CC_FRAME;break;}
 800061a:	4b69      	ldr	r3, [pc, #420]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800061c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000620:	2220      	movs	r2, #32
 8000622:	725a      	strb	r2, [r3, #9]
 8000624:	e000      	b.n	8000628 <CAN_TP2DCM+0xc8>
				default:          {                                        break;}
 8000626:	bf00      	nop
			if(Dcm_Msg_Info_s.transType == DCM_SG_FRAME)/*Single request frame*/
 8000628:	4b65      	ldr	r3, [pc, #404]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800062a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800062e:	7a5b      	ldrb	r3, [r3, #9]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d158      	bne.n	80006e6 <CAN_TP2DCM+0x186>
				Dcm_Msg_Info_s.Sid = TransBuffer[1];
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	785a      	ldrb	r2, [r3, #1]
 8000638:	4b61      	ldr	r3, [pc, #388]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800063a:	701a      	strb	r2, [r3, #0]
				memset(&Dcm_Msg_Info_s.dataBuff,0x00,4096);
 800063c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000640:	2100      	movs	r1, #0
 8000642:	4861      	ldr	r0, [pc, #388]	@ (80007c8 <CAN_TP2DCM+0x268>)
 8000644:	f004 fe6b 	bl	800531e <memset>
				for(LoopIndx = 0; LoopIndx < TransBuffer[0] + 1; LoopIndx++)
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e00b      	b.n	8000666 <CAN_TP2DCM+0x106>
					Dcm_Msg_Info_s.dataBuff[LoopIndx] = TransBuffer[LoopIndx];
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	441a      	add	r2, r3
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	7811      	ldrb	r1, [r2, #0]
 8000658:	4a59      	ldr	r2, [pc, #356]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	705a      	strb	r2, [r3, #1]
				for(LoopIndx = 0; LoopIndx < TransBuffer[0] + 1; LoopIndx++)
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	429a      	cmp	r2, r3
 800066e:	d9ee      	bls.n	800064e <CAN_TP2DCM+0xee>
				Dcm_Msg_Info_s.numByetReq = TransBuffer[0];
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b52      	ldr	r3, [pc, #328]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800067c:	809a      	strh	r2, [r3, #4]
				temSID = Dcm_Msg_Info_s.Sid;
 800067e:	4b50      	ldr	r3, [pc, #320]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	737b      	strb	r3, [r7, #13]
				for(LoopIndx = 0; LoopIndx < sizeof(SID_TABLE)/sizeof(SID_TABLE[0]); LoopIndx++)
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	e00d      	b.n	80006a6 <CAN_TP2DCM+0x146>
					if(temSID == SID_TABLE[LoopIndx].sid)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	4a4f      	ldr	r2, [pc, #316]	@ (80007cc <CAN_TP2DCM+0x26c>)
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4413      	add	r3, r2
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	7b7a      	ldrb	r2, [r7, #13]
 8000696:	429a      	cmp	r2, r3
 8000698:	d102      	bne.n	80006a0 <CAN_TP2DCM+0x140>
					{sidFound = 1;break;}
 800069a:	2301      	movs	r3, #1
 800069c:	73bb      	strb	r3, [r7, #14]
 800069e:	e005      	b.n	80006ac <CAN_TP2DCM+0x14c>
				for(LoopIndx = 0; LoopIndx < sizeof(SID_TABLE)/sizeof(SID_TABLE[0]); LoopIndx++)
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d9ee      	bls.n	800068a <CAN_TP2DCM+0x12a>
				if(sidFound)
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <CAN_TP2DCM+0x160>
					SID_TABLE[LoopIndx].service_fp(&Dcm_Msg_Info_s);
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4a45      	ldr	r2, [pc, #276]	@ (80007cc <CAN_TP2DCM+0x26c>)
 80006b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006ba:	4841      	ldr	r0, [pc, #260]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006bc:	4798      	blx	r3
}
 80006be:	e10d      	b.n	80008dc <CAN_TP2DCM+0x37c>
					Dcm_Msg_Info_s.dataBuff[0] = 0x03;
 80006c0:	4b3f      	ldr	r3, [pc, #252]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	705a      	strb	r2, [r3, #1]
					Dcm_Msg_Info_s.dataBuff[1] = 0x7F;
 80006c6:	4b3e      	ldr	r3, [pc, #248]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006c8:	227f      	movs	r2, #127	@ 0x7f
 80006ca:	709a      	strb	r2, [r3, #2]
					Dcm_Msg_Info_s.dataBuff[2] = Dcm_Msg_Info_s.Sid;
 80006cc:	4b3c      	ldr	r3, [pc, #240]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b3b      	ldr	r3, [pc, #236]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006d2:	70da      	strb	r2, [r3, #3]
					Dcm_Msg_Info_s.dataBuff[3] = NRC11_SERVICE_NOTSUPPORT;
 80006d4:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006d6:	2211      	movs	r2, #17
 80006d8:	711a      	strb	r2, [r3, #4]
					Dcm_Msg_Info_s.respType    = DCM_NEG;
 80006da:	4b39      	ldr	r3, [pc, #228]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006e0:	2202      	movs	r2, #2
 80006e2:	721a      	strb	r2, [r3, #8]
}
 80006e4:	e0fa      	b.n	80008dc <CAN_TP2DCM+0x37c>
			else if (Dcm_Msg_Info_s.transType == DCM_FS_FRAME)/*First frame*/
 80006e6:	4b36      	ldr	r3, [pc, #216]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	2b10      	cmp	r3, #16
 80006f0:	d152      	bne.n	8000798 <CAN_TP2DCM+0x238>
				Dcm_Msg_Info_s.Sid = TransBuffer[2];
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	789a      	ldrb	r2, [r3, #2]
 80006f6:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80006f8:	701a      	strb	r2, [r3, #0]
				memset(&Dcm_Msg_Info_s.dataBuff,0x00,4096);
 80006fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006fe:	2100      	movs	r1, #0
 8000700:	4831      	ldr	r0, [pc, #196]	@ (80007c8 <CAN_TP2DCM+0x268>)
 8000702:	f004 fe0c 	bl	800531e <memset>
				Dcm_Msg_Info_s.numByetReq = TransBuffer[0] ;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000712:	809a      	strh	r2, [r3, #4]
				Dcm_Msg_Info_s.numByetReq <<= 8 ;
 8000714:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800071a:	889b      	ldrh	r3, [r3, #4]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000726:	809a      	strh	r2, [r3, #4]
				Dcm_Msg_Info_s.numByetReq |= TransBuffer[1] ;
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800072a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800072e:	889b      	ldrh	r3, [r3, #4]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	3201      	adds	r2, #1
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	4313      	orrs	r3, r2
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800073c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000740:	809a      	strh	r2, [r3, #4]
				Dcm_Msg_Info_s.numByetReq &= 0x0FFF;
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000748:	889b      	ldrh	r3, [r3, #4]
 800074a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000756:	809a      	strh	r2, [r3, #4]
				for(LoopIndx = 0; LoopIndx < 6; LoopIndx++)
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e00d      	b.n	800077a <CAN_TP2DCM+0x21a>
					Dcm_Msg_Info_s.dataBuff[LoopIndx + 1] = TransBuffer[LoopIndx + 2];
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3302      	adds	r3, #2
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	441a      	add	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	3301      	adds	r3, #1
 800076a:	7811      	ldrb	r1, [r2, #0]
 800076c:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800076e:	4413      	add	r3, r2
 8000770:	460a      	mov	r2, r1
 8000772:	705a      	strb	r2, [r3, #1]
				for(LoopIndx = 0; LoopIndx < 6; LoopIndx++)
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	3301      	adds	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2b05      	cmp	r3, #5
 800077e:	d9ee      	bls.n	800075e <CAN_TP2DCM+0x1fe>
				Consecutive_Curr = 7; /*next position to fill data in consecutive process*/
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <CAN_TP2DCM+0x270>)
 8000782:	2207      	movs	r2, #7
 8000784:	801a      	strh	r2, [r3, #0]
				Dcm_Msg_Info_s.respType = DCM_POS;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <CAN_TP2DCM+0x260>)
 8000788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800078c:	2201      	movs	r2, #1
 800078e:	721a      	strb	r2, [r3, #8]
				DCM_NEW_REQ = 1;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <CAN_TP2DCM+0x25c>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	e0a1      	b.n	80008dc <CAN_TP2DCM+0x37c>
			else if (Dcm_Msg_Info_s.transType == DCM_FC_FRAME)/*FlowControl frame*/
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <CAN_TP2DCM+0x260>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800079e:	7a5b      	ldrb	r3, [r3, #9]
 80007a0:	2b30      	cmp	r3, #48	@ 0x30
 80007a2:	f000 809b 	beq.w	80008dc <CAN_TP2DCM+0x37c>
			else if (Dcm_Msg_Info_s.transType == DCM_CC_FRAME)/*Consecutive frame*/
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <CAN_TP2DCM+0x260>)
 80007a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007ac:	7a5b      	ldrb	r3, [r3, #9]
 80007ae:	2b20      	cmp	r3, #32
 80007b0:	f040 808c 	bne.w	80008cc <CAN_TP2DCM+0x36c>
				for (Consecutive_Next = 0; Consecutive_Next < 7; Consecutive_Next ++)
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <CAN_TP2DCM+0x274>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	e023      	b.n	8000804 <CAN_TP2DCM+0x2a4>
 80007bc:	20000008 	.word	0x20000008
 80007c0:	200004e8 	.word	0x200004e8
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200004e9 	.word	0x200004e9
 80007cc:	08006410 	.word	0x08006410
 80007d0:	200004e4 	.word	0x200004e4
 80007d4:	200004e6 	.word	0x200004e6
					Dcm_Msg_Info_s.dataBuff[Consecutive_Next + Consecutive_Curr] = TransBuffer[Consecutive_Next + 1];
 80007d8:	4b42      	ldr	r3, [pc, #264]	@ (80008e4 <CAN_TP2DCM+0x384>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	441a      	add	r2, r3
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <CAN_TP2DCM+0x384>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <CAN_TP2DCM+0x388>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	440b      	add	r3, r1
 80007ee:	7811      	ldrb	r1, [r2, #0]
 80007f0:	4a3e      	ldr	r2, [pc, #248]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80007f2:	4413      	add	r3, r2
 80007f4:	460a      	mov	r2, r1
 80007f6:	705a      	strb	r2, [r3, #1]
				for (Consecutive_Next = 0; Consecutive_Next < 7; Consecutive_Next ++)
 80007f8:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <CAN_TP2DCM+0x384>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <CAN_TP2DCM+0x384>)
 8000802:	801a      	strh	r2, [r3, #0]
 8000804:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <CAN_TP2DCM+0x384>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2b06      	cmp	r3, #6
 800080a:	d9e5      	bls.n	80007d8 <CAN_TP2DCM+0x278>
				Consecutive_Curr += Consecutive_Next;
 800080c:	4b36      	ldr	r3, [pc, #216]	@ (80008e8 <CAN_TP2DCM+0x388>)
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <CAN_TP2DCM+0x384>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	4413      	add	r3, r2
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b33      	ldr	r3, [pc, #204]	@ (80008e8 <CAN_TP2DCM+0x388>)
 800081a:	801a      	strh	r2, [r3, #0]
				if(Consecutive_Curr >= Dcm_Msg_Info_s.numByetReq)/*Last CC frame was sent*/
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <CAN_TP2DCM+0x38c>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000822:	889a      	ldrh	r2, [r3, #4]
 8000824:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <CAN_TP2DCM+0x388>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d846      	bhi.n	80008ba <CAN_TP2DCM+0x35a>
					temSID = Dcm_Msg_Info_s.Sid;
 800082c:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <CAN_TP2DCM+0x38c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	737b      	strb	r3, [r7, #13]
					for(LoopIndx = 0; LoopIndx < sizeof(SID_TABLE)/sizeof(SID_TABLE[0]); LoopIndx++)
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e020      	b.n	800087a <CAN_TP2DCM+0x31a>
						if(temSID == SID_TABLE[LoopIndx].sid)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <CAN_TP2DCM+0x390>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	7b7a      	ldrb	r2, [r7, #13]
 8000844:	429a      	cmp	r2, r3
 8000846:	d102      	bne.n	800084e <CAN_TP2DCM+0x2ee>
							sidFound = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
							break;
 800084c:	e018      	b.n	8000880 <CAN_TP2DCM+0x320>
						else if((temSID - 0x40) == SID_TABLE[LoopIndx].sid)
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	4926      	ldr	r1, [pc, #152]	@ (80008f0 <CAN_TP2DCM+0x390>)
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	d108      	bne.n	8000874 <CAN_TP2DCM+0x314>
							Dcm_Msg_Info_s.Sid -= 0x40;
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <CAN_TP2DCM+0x38c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3b40      	subs	r3, #64	@ 0x40
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <CAN_TP2DCM+0x38c>)
 800086c:	701a      	strb	r2, [r3, #0]
							sidFound = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	73bb      	strb	r3, [r7, #14]
							break;
 8000872:	e005      	b.n	8000880 <CAN_TP2DCM+0x320>
					for(LoopIndx = 0; LoopIndx < sizeof(SID_TABLE)/sizeof(SID_TABLE[0]); LoopIndx++)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	3301      	adds	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d9db      	bls.n	8000838 <CAN_TP2DCM+0x2d8>
					if(sidFound)
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <CAN_TP2DCM+0x334>
						SID_TABLE[LoopIndx].service_fp(&Dcm_Msg_Info_s);
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <CAN_TP2DCM+0x390>)
 800088a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800088e:	4817      	ldr	r0, [pc, #92]	@ (80008ec <CAN_TP2DCM+0x38c>)
 8000890:	4798      	blx	r3
}
 8000892:	e023      	b.n	80008dc <CAN_TP2DCM+0x37c>
						Dcm_Msg_Info_s.dataBuff[0] = 0x03;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <CAN_TP2DCM+0x38c>)
 8000896:	2203      	movs	r2, #3
 8000898:	705a      	strb	r2, [r3, #1]
						Dcm_Msg_Info_s.dataBuff[1] = 0x7F;
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <CAN_TP2DCM+0x38c>)
 800089c:	227f      	movs	r2, #127	@ 0x7f
 800089e:	709a      	strb	r2, [r3, #2]
						Dcm_Msg_Info_s.dataBuff[2] = Dcm_Msg_Info_s.Sid;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008a6:	70da      	strb	r2, [r3, #3]
						Dcm_Msg_Info_s.dataBuff[3] = NRC11_SERVICE_NOTSUPPORT;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008aa:	2211      	movs	r2, #17
 80008ac:	711a      	strb	r2, [r3, #4]
						Dcm_Msg_Info_s.respType    = DCM_NEG;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b4:	2202      	movs	r2, #2
 80008b6:	721a      	strb	r2, [r3, #8]
}
 80008b8:	e010      	b.n	80008dc <CAN_TP2DCM+0x37c>
					Dcm_Msg_Info_s.respType = DCM_POS;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c0:	2201      	movs	r2, #1
 80008c2:	721a      	strb	r2, [r3, #8]
					DCM_NEW_REQ = 1;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <CAN_TP2DCM+0x394>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
}
 80008ca:	e007      	b.n	80008dc <CAN_TP2DCM+0x37c>
				Dcm_Msg_Info_s.respType = DCM_NORESP;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <CAN_TP2DCM+0x38c>)
 80008ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d2:	2200      	movs	r2, #0
 80008d4:	721a      	strb	r2, [r3, #8]
				DCM_NEW_REQ = 1;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <CAN_TP2DCM+0x394>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200004e6 	.word	0x200004e6
 80008e8:	200004e4 	.word	0x200004e4
 80008ec:	200004e8 	.word	0x200004e8
 80008f0:	08006410 	.word	0x08006410
 80008f4:	20000008 	.word	0x20000008

080008f8 <CAN_DCM2TP>:
void CAN_DCM2TP()
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	if(Dcm_Msg_Info_s.transType == DCM_SG_FRAME)/*Single request frame*/
 80008fc:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 80008fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000902:	7a5b      	ldrb	r3, [r3, #9]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d116      	bne.n	8000936 <CAN_DCM2TP+0x3e>
	{
		if(Dcm_Msg_Info_s.respType == DCM_NORESP)
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 800090a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800090e:	7a1b      	ldrb	r3, [r3, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d047      	beq.n	80009a4 <CAN_DCM2TP+0xac>
		{
			/*do nothing*/
		}
		else if(Dcm_Msg_Info_s.respType == DCM_NEG)
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800091a:	7a1b      	ldrb	r3, [r3, #8]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d141      	bne.n	80009a4 <CAN_DCM2TP+0xac>
		{
			Dcm_Msg_Info_s.dataBuff[0] = 0x03;
 8000920:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000922:	2203      	movs	r2, #3
 8000924:	705a      	strb	r2, [r3, #1]
			Dcm_Msg_Info_s.dataBuff[1] = 0x7F;
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000928:	227f      	movs	r2, #127	@ 0x7f
 800092a:	709a      	strb	r2, [r3, #2]
			Dcm_Msg_Info_s.dataBuff[2] = Dcm_Msg_Info_s.Sid;
 800092c:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000932:	70da      	strb	r2, [r3, #3]

		}
	}
	else{}

}
 8000934:	e036      	b.n	80009a4 <CAN_DCM2TP+0xac>
	else if (Dcm_Msg_Info_s.transType == DCM_FS_FRAME)/*First frame*/
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800093c:	7a5b      	ldrb	r3, [r3, #9]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d103      	bne.n	800094a <CAN_DCM2TP+0x52>
		Dcm_Msg_Info_s.dataBuff[0] = 0x30;
 8000942:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000944:	2230      	movs	r2, #48	@ 0x30
 8000946:	705a      	strb	r2, [r3, #1]
}
 8000948:	e02c      	b.n	80009a4 <CAN_DCM2TP+0xac>
	else if (Dcm_Msg_Info_s.transType == DCM_FC_FRAME)/*FlowControl frame*/
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 800094c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000950:	7a5b      	ldrb	r3, [r3, #9]
 8000952:	2b30      	cmp	r3, #48	@ 0x30
 8000954:	d026      	beq.n	80009a4 <CAN_DCM2TP+0xac>
	else if (Dcm_Msg_Info_s.transType == DCM_CC_FRAME)/*Consecutive frame*/
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800095c:	7a5b      	ldrb	r3, [r3, #9]
 800095e:	2b20      	cmp	r3, #32
 8000960:	d120      	bne.n	80009a4 <CAN_DCM2TP+0xac>
		if(Consecutive_Curr < Dcm_Msg_Info_s.numByetReq)
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000968:	889a      	ldrh	r2, [r3, #4]
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <CAN_DCM2TP+0xbc>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	429a      	cmp	r2, r3
 8000970:	d902      	bls.n	8000978 <CAN_DCM2TP+0x80>
			Dcm_Msg_Info_s.dataBuff[0] = 0x20;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000974:	2220      	movs	r2, #32
 8000976:	705a      	strb	r2, [r3, #1]
		if(Dcm_Msg_Info_s.respType == DCM_NORESP)
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 800097a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00f      	beq.n	80009a4 <CAN_DCM2TP+0xac>
		else if(Dcm_Msg_Info_s.respType == DCM_NEG)
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d109      	bne.n	80009a4 <CAN_DCM2TP+0xac>
			Dcm_Msg_Info_s.dataBuff[0] = 0x03;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000992:	2203      	movs	r2, #3
 8000994:	705a      	strb	r2, [r3, #1]
			Dcm_Msg_Info_s.dataBuff[1] = 0x7F;
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 8000998:	227f      	movs	r2, #127	@ 0x7f
 800099a:	709a      	strb	r2, [r3, #2]
			Dcm_Msg_Info_s.dataBuff[2] = Dcm_Msg_Info_s.Sid;
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <CAN_DCM2TP+0xb8>)
 80009a2:	70da      	strb	r2, [r3, #3]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200004e8 	.word	0x200004e8
 80009b4:	200004e4 	.word	0x200004e4

080009b8 <Read_CanID_Tester>:

uint16_t Read_CanID_Tester()
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
	uint16_t ret_val;
	uint32_t ret_CANID;

	ret_val = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	80fb      	strh	r3, [r7, #6]
	ret_CANID = ProtocolI_RX;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <Read_CanID_Tester+0x58>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	603b      	str	r3, [r7, #0]

	Dcm_Msg_Info_s.dataBuff[0] = 0x07;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	705a      	strb	r2, [r3, #1]
	Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	3340      	adds	r3, #64	@ 0x40
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009d8:	709a      	strb	r2, [r3, #2]
	Dcm_Msg_Info_s.dataBuff[4] = ret_CANID >> 24;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	0e1b      	lsrs	r3, r3, #24
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009e2:	715a      	strb	r2, [r3, #5]
	Dcm_Msg_Info_s.dataBuff[5] = ret_CANID >> 16;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	0c1b      	lsrs	r3, r3, #16
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009ec:	719a      	strb	r2, [r3, #6]
	Dcm_Msg_Info_s.dataBuff[6] = ret_CANID >> 8;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009f6:	71da      	strb	r2, [r3, #7]
	Dcm_Msg_Info_s.dataBuff[7] = ret_CANID;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <Read_CanID_Tester+0x5c>)
 80009fe:	721a      	strb	r2, [r3, #8]

	return ret_val;
 8000a00:	88fb      	ldrh	r3, [r7, #6]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	200004e8 	.word	0x200004e8

08000a18 <Read_CanID_ECU>:

uint16_t Read_CanID_ECU()
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	uint16_t ret_val;
	uint32_t ret_CANID;

	ret_val = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	80fb      	strh	r3, [r7, #6]
	ret_CANID = ProtocolI_TX;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <Read_CanID_ECU+0x58>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	603b      	str	r3, [r7, #0]

	Dcm_Msg_Info_s.dataBuff[0] = 0x07;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	705a      	strb	r2, [r3, #1]
	Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	3340      	adds	r3, #64	@ 0x40
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a38:	709a      	strb	r2, [r3, #2]
	Dcm_Msg_Info_s.dataBuff[4] = ret_CANID >> 24;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	0e1b      	lsrs	r3, r3, #24
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a42:	715a      	strb	r2, [r3, #5]
	Dcm_Msg_Info_s.dataBuff[5] = ret_CANID >> 16;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	0c1b      	lsrs	r3, r3, #16
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a4c:	719a      	strb	r2, [r3, #6]
	Dcm_Msg_Info_s.dataBuff[6] = ret_CANID >> 8;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a56:	71da      	strb	r2, [r3, #7]
	Dcm_Msg_Info_s.dataBuff[7] = ret_CANID;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <Read_CanID_ECU+0x5c>)
 8000a5e:	721a      	strb	r2, [r3, #8]

	return ret_val;
 8000a60:	88fb      	ldrh	r3, [r7, #6]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000004 	.word	0x20000004
 8000a74:	200004e8 	.word	0x200004e8

08000a78 <Write_CanID_Tester>:
uint16_t Write_CanID_Tester()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
	uint16_t ret_val;
	uint32_t CANID;

	ret_val = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	80fb      	strh	r3, [r7, #6]

	if(Seca_Timer == 0)
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <Write_CanID_Tester+0xac>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <Write_CanID_Tester+0x1a>
	{
		ret_val =  NRC33_SECURITY_ACCESS_DENIED;
 8000a8a:	2333      	movs	r3, #51	@ 0x33
 8000a8c:	80fb      	strh	r3, [r7, #6]
		return ret_val;
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	e042      	b.n	8000b18 <Write_CanID_Tester+0xa0>
	}
	else
	{
		CANID = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
		CANID = Dcm_Msg_Info_s.dataBuff[4];
 8000a96:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 24) | Dcm_Msg_Info_s.dataBuff[5];
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	061b      	lsls	r3, r3, #24
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000aa2:	7992      	ldrb	r2, [r2, #6]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 16) | Dcm_Msg_Info_s.dataBuff[6];
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	041b      	lsls	r3, r3, #16
 8000aac:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000aae:	79d2      	ldrb	r2, [r2, #7]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 8 ) | Dcm_Msg_Info_s.dataBuff[7];
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000aba:	7a12      	ldrb	r2, [r2, #8]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	603b      	str	r3, [r7, #0]
		if(((CANID & 0xFFFFFFFF) > 0x7FF) | (CANID == 0))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	bf8c      	ite	hi
 8000aca:	2301      	movhi	r3, #1
 8000acc:	2300      	movls	r3, #0
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2301      	moveq	r3, #1
 8000ad8:	2300      	movne	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <Write_CanID_Tester+0x74>
		{
			ret_val =  NRC31_DID_NOTSUPPORT;
 8000ae4:	2331      	movs	r3, #49	@ 0x31
 8000ae6:	80fb      	strh	r3, [r7, #6]
			return ret_val;
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	e015      	b.n	8000b18 <Write_CanID_Tester+0xa0>
		}
		else if(CANID == ProtocolI_TX)
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <Write_CanID_Tester+0xb4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d103      	bne.n	8000afe <Write_CanID_Tester+0x86>
		{
			ret_val =  NRC22_CONDITON_NOTCORRECT;
 8000af6:	2322      	movs	r3, #34	@ 0x22
 8000af8:	80fb      	strh	r3, [r7, #6]
			return ret_val;
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	e00c      	b.n	8000b18 <Write_CanID_Tester+0xa0>
		}
		else
		{
			ProtocolI_RX = CANID;
 8000afe:	4a0c      	ldr	r2, [pc, #48]	@ (8000b30 <Write_CanID_Tester+0xb8>)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6013      	str	r3, [r2, #0]
			Dcm_Msg_Info_s.dataBuff[0] = 0x01;
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	705a      	strb	r2, [r3, #1]
			Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3340      	adds	r3, #64	@ 0x40
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <Write_CanID_Tester+0xb0>)
 8000b14:	709a      	strb	r2, [r3, #2]
		}
	}

	return ret_val;
 8000b16:	88fb      	ldrh	r3, [r7, #6]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200000e0 	.word	0x200000e0
 8000b28:	200004e8 	.word	0x200004e8
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	20000000 	.word	0x20000000

08000b34 <Write_CanID_ECU>:

uint16_t Write_CanID_ECU()
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
	uint16_t ret_val;
	uint32_t CANID;

	ret_val = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	80fb      	strh	r3, [r7, #6]

	if(Seca_Timer == 0)
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <Write_CanID_ECU+0xac>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <Write_CanID_ECU+0x1a>
	{
		ret_val =  NRC33_SECURITY_ACCESS_DENIED;
 8000b46:	2333      	movs	r3, #51	@ 0x33
 8000b48:	80fb      	strh	r3, [r7, #6]
		return ret_val;
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	e042      	b.n	8000bd4 <Write_CanID_ECU+0xa0>
	}
	else
	{
		CANID = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
		CANID = Dcm_Msg_Info_s.dataBuff[4];
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 24) | Dcm_Msg_Info_s.dataBuff[5];
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	061b      	lsls	r3, r3, #24
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000b5e:	7992      	ldrb	r2, [r2, #6]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 16) | Dcm_Msg_Info_s.dataBuff[6];
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000b6a:	79d2      	ldrb	r2, [r2, #7]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	603b      	str	r3, [r7, #0]
		CANID = (CANID << 8 ) | Dcm_Msg_Info_s.dataBuff[7];
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000b76:	7a12      	ldrb	r2, [r2, #8]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	603b      	str	r3, [r7, #0]
		if(((CANID & 0xFFFFFFFF) > 0x7FF) | (CANID == 0))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b82:	4293      	cmp	r3, r2
 8000b84:	bf8c      	ite	hi
 8000b86:	2301      	movhi	r3, #1
 8000b88:	2300      	movls	r3, #0
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <Write_CanID_ECU+0x74>
		{
			ret_val =  NRC31_DID_NOTSUPPORT;
 8000ba0:	2331      	movs	r3, #49	@ 0x31
 8000ba2:	80fb      	strh	r3, [r7, #6]
			return ret_val;
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	e015      	b.n	8000bd4 <Write_CanID_ECU+0xa0>
		}
		else if(CANID == ProtocolI_RX)
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <Write_CanID_ECU+0xb4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d103      	bne.n	8000bba <Write_CanID_ECU+0x86>
		{
			ret_val =  NRC22_CONDITON_NOTCORRECT;
 8000bb2:	2322      	movs	r3, #34	@ 0x22
 8000bb4:	80fb      	strh	r3, [r7, #6]
			return ret_val;
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	e00c      	b.n	8000bd4 <Write_CanID_ECU+0xa0>
		}
		else
		{
			ProtocolI_TX = CANID;
 8000bba:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <Write_CanID_ECU+0xb8>)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	6013      	str	r3, [r2, #0]
			Dcm_Msg_Info_s.dataBuff[0] = 0x01;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	705a      	strb	r2, [r3, #1]
			Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3340      	adds	r3, #64	@ 0x40
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <Write_CanID_ECU+0xb0>)
 8000bd0:	709a      	strb	r2, [r3, #2]
		}
	}

	return ret_val;
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200000e0 	.word	0x200000e0
 8000be4:	200004e8 	.word	0x200004e8
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <Read_22_2E_Data>:

uint16_t Read_22_2E_Data()
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
	uint16_t ret_val = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	/*for further implement*/
	return ret_val;
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <Write_22_2E_Data>:

uint16_t Write_22_2E_Data()
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	uint16_t ret_val = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	80bb      	strh	r3, [r7, #4]
	uint16_t loop;
	if(Seca_Timer == 0)
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <Write_22_2E_Data+0x6c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <Write_22_2E_Data+0x1a>
	{
		ret_val =  NRC33_SECURITY_ACCESS_DENIED;
 8000c1a:	2333      	movs	r3, #51	@ 0x33
 8000c1c:	80bb      	strh	r3, [r7, #4]
		return ret_val;
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	e021      	b.n	8000c66 <Write_22_2E_Data+0x5e>
	}
	else
	{
		for(loop = 0; loop < (Dcm_Msg_Info_s.numByetReq - 3); loop ++ )
 8000c22:	2300      	movs	r3, #0
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	e00a      	b.n	8000c3e <Write_22_2E_Data+0x36>
		{
			dummy_eeprom_buffer[loop] = Dcm_Msg_Info_s.dataBuff[loop + 4];
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	1d1a      	adds	r2, r3, #4
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	4912      	ldr	r1, [pc, #72]	@ (8000c78 <Write_22_2E_Data+0x70>)
 8000c30:	440a      	add	r2, r1
 8000c32:	7851      	ldrb	r1, [r2, #1]
 8000c34:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <Write_22_2E_Data+0x74>)
 8000c36:	54d1      	strb	r1, [r2, r3]
		for(loop = 0; loop < (Dcm_Msg_Info_s.numByetReq - 3); loop ++ )
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	88fa      	ldrh	r2, [r7, #6]
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <Write_22_2E_Data+0x70>)
 8000c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbec      	blt.n	8000c28 <Write_22_2E_Data+0x20>
		}
		Dcm_Msg_Info_s.dataBuff[0] = 0x01;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <Write_22_2E_Data+0x70>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	705a      	strb	r2, [r3, #1]
		Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <Write_22_2E_Data+0x70>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3340      	adds	r3, #64	@ 0x40
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <Write_22_2E_Data+0x70>)
 8000c5e:	709a      	strb	r2, [r3, #2]

		ret_val = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	80bb      	strh	r3, [r7, #4]
	}

	return ret_val;
 8000c64:	88bb      	ldrh	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000e0 	.word	0x200000e0
 8000c78:	200004e8 	.word	0x200004e8
 8000c7c:	200000e4 	.word	0x200000e4

08000c80 <Gen_Ramdom_Seed>:

uint16_t Gen_Ramdom_Seed()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint16_t ret_val = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	80fb      	strh	r3, [r7, #6]

	Dcm_Msg_Info_s.dataBuff[0] = 0x06;
 8000c8a:	4b53      	ldr	r3, [pc, #332]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	705a      	strb	r2, [r3, #1]
	Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000c90:	4b51      	ldr	r3, [pc, #324]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3340      	adds	r3, #64	@ 0x40
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000c9a:	709a      	strb	r2, [r3, #2]
	Dcm_Msg_Info_s.dataBuff[3] = rand();/*seed0*/
 8000c9c:	f004 f9dc 	bl	8005058 <rand>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000ca6:	711a      	strb	r2, [r3, #4]
	Dcm_Msg_Info_s.dataBuff[4] = rand();/*seed1*/
 8000ca8:	f004 f9d6 	bl	8005058 <rand>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cb2:	715a      	strb	r2, [r3, #5]
	Dcm_Msg_Info_s.dataBuff[5] = rand();/*seed2*/
 8000cb4:	f004 f9d0 	bl	8005058 <rand>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b46      	ldr	r3, [pc, #280]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cbe:	719a      	strb	r2, [r3, #6]
	Dcm_Msg_Info_s.dataBuff[6] = rand();/*seed3*/
 8000cc0:	f004 f9ca 	bl	8005058 <rand>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cca:	71da      	strb	r2, [r3, #7]
	Seca_Key_Internal[0] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[3] ^ Dcm_Msg_Info_s.dataBuff[4]);
 8000ccc:	4b42      	ldr	r3, [pc, #264]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cce:	791a      	ldrb	r2, [r3, #4]
 8000cd0:	4b41      	ldr	r3, [pc, #260]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cd2:	795b      	ldrb	r3, [r3, #5]
 8000cd4:	4053      	eors	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000cda:	701a      	strb	r2, [r3, #0]
	Seca_Key_Internal[1] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[4] + Dcm_Msg_Info_s.dataBuff[5]);
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cde:	795a      	ldrb	r2, [r3, #5]
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000ce2:	799b      	ldrb	r3, [r3, #6]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000cea:	705a      	strb	r2, [r3, #1]
	Seca_Key_Internal[2] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[5] ^ Dcm_Msg_Info_s.dataBuff[6]);
 8000cec:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cee:	799a      	ldrb	r2, [r3, #6]
 8000cf0:	4b39      	ldr	r3, [pc, #228]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cf2:	79db      	ldrb	r3, [r3, #7]
 8000cf4:	4053      	eors	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b38      	ldr	r3, [pc, #224]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000cfa:	709a      	strb	r2, [r3, #2]
	Seca_Key_Internal[3] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[6] + Dcm_Msg_Info_s.dataBuff[3]);
 8000cfc:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000cfe:	79da      	ldrb	r2, [r3, #7]
 8000d00:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d0a:	70da      	strb	r2, [r3, #3]
#if SECA_FLOWCONTROL == 1
	Seca_Key_Internal[4] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[3] | Dcm_Msg_Info_s.dataBuff[4]);
 8000d0c:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d0e:	791a      	ldrb	r2, [r3, #4]
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d12:	795b      	ldrb	r3, [r3, #5]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d1a:	711a      	strb	r2, [r3, #4]
	Seca_Key_Internal[5] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[4] + Dcm_Msg_Info_s.dataBuff[5]);
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d1e:	795a      	ldrb	r2, [r3, #5]
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d22:	799b      	ldrb	r3, [r3, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d2a:	715a      	strb	r2, [r3, #5]
	Seca_Key_Internal[6] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[5] | Dcm_Msg_Info_s.dataBuff[6]);
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d2e:	799a      	ldrb	r2, [r3, #6]
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d32:	79db      	ldrb	r3, [r3, #7]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d3a:	719a      	strb	r2, [r3, #6]
	Seca_Key_Internal[7] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[6] + Dcm_Msg_Info_s.dataBuff[3]);
 8000d3c:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d3e:	79da      	ldrb	r2, [r3, #7]
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d4a:	71da      	strb	r2, [r3, #7]
	Seca_Key_Internal[8] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[3] & Dcm_Msg_Info_s.dataBuff[4]);
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d4e:	791a      	ldrb	r2, [r3, #4]
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	4013      	ands	r3, r2
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d5a:	721a      	strb	r2, [r3, #8]
	Seca_Key_Internal[9] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[4] + Dcm_Msg_Info_s.dataBuff[5]);
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d5e:	795a      	ldrb	r2, [r3, #5]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	4413      	add	r3, r2
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d6a:	725a      	strb	r2, [r3, #9]
	Seca_Key_Internal[10] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[5] & Dcm_Msg_Info_s.dataBuff[6]);
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d6e:	799a      	ldrb	r2, [r3, #6]
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d72:	79db      	ldrb	r3, [r3, #7]
 8000d74:	4013      	ands	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d7a:	729a      	strb	r2, [r3, #10]
	Seca_Key_Internal[11] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[6] + Dcm_Msg_Info_s.dataBuff[3]);
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d7e:	79da      	ldrb	r2, [r3, #7]
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d8a:	72da      	strb	r2, [r3, #11]
	Seca_Key_Internal[12] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[3] - Dcm_Msg_Info_s.dataBuff[4]);
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d8e:	791a      	ldrb	r2, [r3, #4]
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d92:	795b      	ldrb	r3, [r3, #5]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000d9a:	731a      	strb	r2, [r3, #12]
	Seca_Key_Internal[13] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[4] + Dcm_Msg_Info_s.dataBuff[5]);
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000d9e:	795a      	ldrb	r2, [r3, #5]
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000da2:	799b      	ldrb	r3, [r3, #6]
 8000da4:	4413      	add	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000daa:	735a      	strb	r2, [r3, #13]
	Seca_Key_Internal[14] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[5] - Dcm_Msg_Info_s.dataBuff[6]);
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000dae:	799a      	ldrb	r2, [r3, #6]
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000db2:	79db      	ldrb	r3, [r3, #7]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000dba:	739a      	strb	r2, [r3, #14]
	Seca_Key_Internal[15] = (uint8_t)(Dcm_Msg_Info_s.dataBuff[6] + Dcm_Msg_Info_s.dataBuff[3]);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000dbe:	79da      	ldrb	r2, [r3, #7]
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <Gen_Ramdom_Seed+0x158>)
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <Gen_Ramdom_Seed+0x15c>)
 8000dca:	73da      	strb	r2, [r3, #15]
#else

#endif
	return ret_val;
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200004e8 	.word	0x200004e8
 8000ddc:	200000d0 	.word	0x200000d0

08000de0 <Compare_Key>:
uint16_t Compare_Key()
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
	uint16_t ret_val = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	82fb      	strh	r3, [r7, #22]
	uint8_t Seca_Key_External[16];
	uint8_t loop = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	757b      	strb	r3, [r7, #21]

#if SECA_FLOWCONTROL == 1
	Seca_Key_External[0] = Dcm_Msg_Info_s.dataBuff[3];
 8000dee:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <Compare_Key+0xd4>)
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	713b      	strb	r3, [r7, #4]
	Seca_Key_External[1] = Dcm_Msg_Info_s.dataBuff[4];
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <Compare_Key+0xd4>)
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	717b      	strb	r3, [r7, #5]
	Seca_Key_External[2] = Dcm_Msg_Info_s.dataBuff[5];
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb4 <Compare_Key+0xd4>)
 8000dfc:	799b      	ldrb	r3, [r3, #6]
 8000dfe:	71bb      	strb	r3, [r7, #6]
	Seca_Key_External[3] = Dcm_Msg_Info_s.dataBuff[6];
 8000e00:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e02:	79db      	ldrb	r3, [r3, #7]
 8000e04:	71fb      	strb	r3, [r7, #7]
	Seca_Key_External[4] = Dcm_Msg_Info_s.dataBuff[7];
 8000e06:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e08:	7a1b      	ldrb	r3, [r3, #8]
 8000e0a:	723b      	strb	r3, [r7, #8]
	Seca_Key_External[5] = Dcm_Msg_Info_s.dataBuff[8];
 8000e0c:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e0e:	7a5b      	ldrb	r3, [r3, #9]
 8000e10:	727b      	strb	r3, [r7, #9]
	Seca_Key_External[6] = Dcm_Msg_Info_s.dataBuff[9];
 8000e12:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e14:	7a9b      	ldrb	r3, [r3, #10]
 8000e16:	72bb      	strb	r3, [r7, #10]
	Seca_Key_External[7] = Dcm_Msg_Info_s.dataBuff[10];
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e1a:	7adb      	ldrb	r3, [r3, #11]
 8000e1c:	72fb      	strb	r3, [r7, #11]
	Seca_Key_External[8] = Dcm_Msg_Info_s.dataBuff[11];
 8000e1e:	4b25      	ldr	r3, [pc, #148]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e20:	7b1b      	ldrb	r3, [r3, #12]
 8000e22:	733b      	strb	r3, [r7, #12]
	Seca_Key_External[9] = Dcm_Msg_Info_s.dataBuff[12];
 8000e24:	4b23      	ldr	r3, [pc, #140]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e26:	7b5b      	ldrb	r3, [r3, #13]
 8000e28:	737b      	strb	r3, [r7, #13]
	Seca_Key_External[10] = Dcm_Msg_Info_s.dataBuff[13];
 8000e2a:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e2c:	7b9b      	ldrb	r3, [r3, #14]
 8000e2e:	73bb      	strb	r3, [r7, #14]
	Seca_Key_External[11] = Dcm_Msg_Info_s.dataBuff[14];
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e32:	7bdb      	ldrb	r3, [r3, #15]
 8000e34:	73fb      	strb	r3, [r7, #15]
	Seca_Key_External[12] = Dcm_Msg_Info_s.dataBuff[15];
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e38:	7c1b      	ldrb	r3, [r3, #16]
 8000e3a:	743b      	strb	r3, [r7, #16]
	Seca_Key_External[13] = Dcm_Msg_Info_s.dataBuff[16];
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e3e:	7c5b      	ldrb	r3, [r3, #17]
 8000e40:	747b      	strb	r3, [r7, #17]
	Seca_Key_External[14] = Dcm_Msg_Info_s.dataBuff[17];
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e44:	7c9b      	ldrb	r3, [r3, #18]
 8000e46:	74bb      	strb	r3, [r7, #18]
	Seca_Key_External[15] = Dcm_Msg_Info_s.dataBuff[18];
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e4a:	7cdb      	ldrb	r3, [r3, #19]
 8000e4c:	74fb      	strb	r3, [r7, #19]
	for(loop = 0; loop < 16; loop++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	757b      	strb	r3, [r7, #21]
 8000e52:	e00c      	b.n	8000e6e <Compare_Key+0x8e>
	{
		if(Seca_Key_External[loop] != Seca_Key_Internal[loop])
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	3318      	adds	r3, #24
 8000e58:	443b      	add	r3, r7
 8000e5a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000e5e:	7d7b      	ldrb	r3, [r7, #21]
 8000e60:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <Compare_Key+0xd8>)
 8000e62:	5ccb      	ldrb	r3, [r1, r3]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d106      	bne.n	8000e76 <Compare_Key+0x96>
	for(loop = 0; loop < 16; loop++)
 8000e68:	7d7b      	ldrb	r3, [r7, #21]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	757b      	strb	r3, [r7, #21]
 8000e6e:	7d7b      	ldrb	r3, [r7, #21]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d9ef      	bls.n	8000e54 <Compare_Key+0x74>
 8000e74:	e000      	b.n	8000e78 <Compare_Key+0x98>
		{
			break;
 8000e76:	bf00      	nop
		}
	}
	if(loop < 16)
 8000e78:	7d7b      	ldrb	r3, [r7, #21]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	d802      	bhi.n	8000e84 <Compare_Key+0xa4>
	{
		ret_val = NRC35_INVALID_KEY;
 8000e7e:	2335      	movs	r3, #53	@ 0x35
 8000e80:	82fb      	strh	r3, [r7, #22]
 8000e82:	e00f      	b.n	8000ea4 <Compare_Key+0xc4>
		ret_val = NRC35_INVALID_KEY;
	}
#endif
	else
	{
		Seca_Timer = 5000; /*Set Seca timer to 5 seconds*/
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <Compare_Key+0xdc>)
 8000e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e8a:	801a      	strh	r2, [r3, #0]
		Dcm_Msg_Info_s.dataBuff[0] = 0x02;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	705a      	strb	r2, [r3, #1]
		Dcm_Msg_Info_s.dataBuff[1] = Dcm_Msg_Info_s.Sid + 0x40;
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3340      	adds	r3, #64	@ 0x40
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <Compare_Key+0xd4>)
 8000e9c:	709a      	strb	r2, [r3, #2]
		Dcm_Msg_Info_s.dataBuff[2] = 0x02;
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <Compare_Key+0xd4>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	70da      	strb	r2, [r3, #3]
	}

	return ret_val;
 8000ea4:	8afb      	ldrh	r3, [r7, #22]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200004e8 	.word	0x200004e8
 8000eb8:	200000d0 	.word	0x200000d0
 8000ebc:	200000e0 	.word	0x200000e0

08000ec0 <dcm_rdbi>:
	NRC31_DID_NOTSUPPORT,
	NRC10_GENERAL_REJECT
};

void dcm_rdbi(Dcm_Msg_Info* MsgInfor)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	uint8_t  LoopIdx;
	uint8_t  FuncIdx;
	uint16_t Dcm_Func_retval;

	/*Local variable initialization*/
	Tem_DID = 0x0000;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	817b      	strh	r3, [r7, #10]
	NegRes = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
	LoopIdx = 0x00;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73bb      	strb	r3, [r7, #14]
	Dcm_Func_retval = 0x0000;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	813b      	strh	r3, [r7, #8]

	if(MsgInfor->numByetReq != 0x03)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ede:	889b      	ldrh	r3, [r3, #4]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d002      	beq.n	8000eea <dcm_rdbi+0x2a>
	{
		/*check if request length is correct*/
		NegRes = Dcm_Rdbi_Conf1.InvalidLength;
 8000ee4:	2313      	movs	r3, #19
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e02e      	b.n	8000f48 <dcm_rdbi+0x88>
	}
	else
	{
		/*Get DID value from request buffer*/
		Tem_DID  = (uint16_t)MsgInfor->dataBuff[2];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	817b      	strh	r3, [r7, #10]
		Tem_DID  = Tem_DID<<8;
 8000ef0:	897b      	ldrh	r3, [r7, #10]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	817b      	strh	r3, [r7, #10]
		Tem_DID |=(uint16_t)MsgInfor->dataBuff[3];
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	897b      	ldrh	r3, [r7, #10]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	817b      	strh	r3, [r7, #10]

		/*Search DIDs*/
		for(LoopIdx = 0; LoopIdx < Dcm_Rdbi_Conf1.numDid ; LoopIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	73bb      	strb	r3, [r7, #14]
 8000f06:	e00a      	b.n	8000f1e <dcm_rdbi+0x5e>
		{
			if(Dcm_Rdbi_Conf1.RdbiDidTable[LoopIdx].Did == Tem_DID)
 8000f08:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb4 <dcm_rdbi+0xf4>)
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d008      	beq.n	8000f2a <dcm_rdbi+0x6a>
		for(LoopIdx = 0; LoopIdx < Dcm_Rdbi_Conf1.numDid ; LoopIdx++)
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	2203      	movs	r2, #3
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d3ef      	bcc.n	8000f08 <dcm_rdbi+0x48>
 8000f28:	e000      	b.n	8000f2c <dcm_rdbi+0x6c>
			{
				break;
 8000f2a:	bf00      	nop
			}
		}
		if(LoopIdx >= Dcm_Rdbi_Conf1.numDid)
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2203      	movs	r2, #3
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d302      	bcc.n	8000f3c <dcm_rdbi+0x7c>
		{
			NegRes = Dcm_Rdbi_Conf1.DidNotSupport;
 8000f36:	2331      	movs	r3, #49	@ 0x31
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e005      	b.n	8000f48 <dcm_rdbi+0x88>
		}
		else
		{
			FuncIdx = Dcm_Rdbi_Conf1.RdbiDidTable[LoopIdx].FuncIndx;
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <dcm_rdbi+0xf4>)
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	737b      	strb	r3, [r7, #13]
		}

	}

	if(NegRes == 0x00)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d11f      	bne.n	8000f8e <dcm_rdbi+0xce>
	{
		/*Execute service DID and send Positive response*/
		Dcm_Func_retval = (*dcm_funcs_fp[FuncIdx])();
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <dcm_rdbi+0xf8>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	4798      	blx	r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	813b      	strh	r3, [r7, #8]

		switch (Dcm_Func_retval)
 8000f5c:	893b      	ldrh	r3, [r7, #8]
 8000f5e:	2b33      	cmp	r3, #51	@ 0x33
 8000f60:	d00c      	beq.n	8000f7c <dcm_rdbi+0xbc>
 8000f62:	2b33      	cmp	r3, #51	@ 0x33
 8000f64:	dc10      	bgt.n	8000f88 <dcm_rdbi+0xc8>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <dcm_rdbi+0xb0>
 8000f6a:	2b22      	cmp	r3, #34	@ 0x22
 8000f6c:	d009      	beq.n	8000f82 <dcm_rdbi+0xc2>
 8000f6e:	e00b      	b.n	8000f88 <dcm_rdbi+0xc8>
		{
			case POS_RES:
			{
				/*Send Positive response*/
				MsgInfor->respType = DCM_POS;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f76:	2201      	movs	r2, #1
 8000f78:	721a      	strb	r2, [r3, #8]
				break;
 8000f7a:	e008      	b.n	8000f8e <dcm_rdbi+0xce>
			}
			case NRC33_SECURITY_ACCESS_DENIED:
			{
				/*for further practice*/
				NegRes = NRC33_SECURITY_ACCESS_DENIED;
 8000f7c:	2333      	movs	r3, #51	@ 0x33
 8000f7e:	73fb      	strb	r3, [r7, #15]
				break;
 8000f80:	e005      	b.n	8000f8e <dcm_rdbi+0xce>
			}
			case NRC22_CONDITON_NOTCORRECT:
			{
				/*for further practice*/
				NegRes = NRC22_CONDITON_NOTCORRECT;
 8000f82:	2322      	movs	r3, #34	@ 0x22
 8000f84:	73fb      	strb	r3, [r7, #15]
				break;
 8000f86:	e002      	b.n	8000f8e <dcm_rdbi+0xce>
			}
			default:
			{
				/*for further practice*/
				NegRes = Dcm_Rdbi_Conf1.GeneralReject;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	73fb      	strb	r3, [r7, #15]
				break;
 8000f8c:	bf00      	nop
			}
		}

	}
	if(NegRes != 0x00)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <dcm_rdbi+0xe4>
	{
		/*Send negative response*/
		MsgInfor->dataBuff[3] = NegRes;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	711a      	strb	r2, [r3, #4]
		MsgInfor->respType = DCM_NEG;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	721a      	strb	r2, [r3, #8]
	}

	DCM_NEW_REQ = 1;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <dcm_rdbi+0xfc>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
	return;
 8000faa:	bf00      	nop
}
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08006448 	.word	0x08006448
 8000fb8:	08006428 	.word	0x08006428
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <dcm_seca>:

/*Service state: 0->Seed, 1->Key*/
uint8_t Service_Stae = 0;

void dcm_seca(Dcm_Msg_Info* MsgInfor)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint8_t  LoopIdx;
	uint8_t  FuncIdx;
	uint16_t Dcm_Func_retval;

	/*Local variable initialization*/
	Tem_SubFunc = 0x0000;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	733b      	strb	r3, [r7, #12]
	NegRes = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
	LoopIdx = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73bb      	strb	r3, [r7, #14]
	Dcm_Func_retval = 0x0000;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	817b      	strh	r3, [r7, #10]


	if(MsgInfor->numByetReq > 0x06)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d902      	bls.n	8000fea <dcm_seca+0x2a>
	{
		/*dirty code for flow control with fixed keys length*/
		NegRes = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e018      	b.n	800101c <dcm_seca+0x5c>
	}
	else if((MsgInfor->numByetReq != 0x02)&&(Service_Stae==0))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d006      	beq.n	8001004 <dcm_seca+0x44>
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8001134 <dcm_seca+0x174>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <dcm_seca+0x44>
	{
		/*check if request length is correct*/
		NegRes = Dcm_Seca_Conf1.InvalidLength;
 8000ffe:	2313      	movs	r3, #19
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e00b      	b.n	800101c <dcm_seca+0x5c>
	}
	else if((MsgInfor->numByetReq != 0x06)&&(Service_Stae==1))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800100a:	889b      	ldrh	r3, [r3, #4]
 800100c:	2b06      	cmp	r3, #6
 800100e:	d005      	beq.n	800101c <dcm_seca+0x5c>
 8001010:	4b48      	ldr	r3, [pc, #288]	@ (8001134 <dcm_seca+0x174>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <dcm_seca+0x5c>
	{
		/*check if request length is correct*/
		NegRes = Dcm_Seca_Conf1.InvalidLength;
 8001018:	2313      	movs	r3, #19
 800101a:	73fb      	strb	r3, [r7, #15]
	}
	else{}

	if (NegRes == 0)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d14b      	bne.n	80010ba <dcm_seca+0xfa>
	{
		/*Get DID value from request buffer*/
		Tem_SubFunc = MsgInfor->dataBuff[2];
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	733b      	strb	r3, [r7, #12]

		/*Search DIDs*/
		for(LoopIdx = 0; LoopIdx < Dcm_Seca_Conf1.numSub ; LoopIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e00b      	b.n	8001046 <dcm_seca+0x86>
		{
			if(Dcm_Seca_Conf1.SecaSubFuncTable[LoopIdx].Subfunc == Tem_SubFunc)
 800102e:	4a42      	ldr	r2, [pc, #264]	@ (8001138 <dcm_seca+0x178>)
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	b29b      	uxth	r3, r3
 800103c:	429a      	cmp	r2, r3
 800103e:	d008      	beq.n	8001052 <dcm_seca+0x92>
		for(LoopIdx = 0; LoopIdx < Dcm_Seca_Conf1.numSub ; LoopIdx++)
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	3301      	adds	r3, #1
 8001044:	73bb      	strb	r3, [r7, #14]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2202      	movs	r2, #2
 800104c:	4293      	cmp	r3, r2
 800104e:	d3ee      	bcc.n	800102e <dcm_seca+0x6e>
 8001050:	e000      	b.n	8001054 <dcm_seca+0x94>
			{
				break;
 8001052:	bf00      	nop
			}
		}
		if(LoopIdx >= Dcm_Seca_Conf1.numSub)
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	b29b      	uxth	r3, r3
 8001058:	2202      	movs	r2, #2
 800105a:	4293      	cmp	r3, r2
 800105c:	d302      	bcc.n	8001064 <dcm_seca+0xa4>
		{
			NegRes = Dcm_Seca_Conf1.SubFuncNotSupport;
 800105e:	2331      	movs	r3, #49	@ 0x31
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e02a      	b.n	80010ba <dcm_seca+0xfa>
		}
		else
		{
			if((Tem_SubFunc % 2 == 0) && (Service_Stae == 0))
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <dcm_seca+0xbe>
 8001070:	4b30      	ldr	r3, [pc, #192]	@ (8001134 <dcm_seca+0x174>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <dcm_seca+0xbe>
			{
				NegRes = Dcm_Seca_Conf1.SequenceError;
 8001078:	2324      	movs	r3, #36	@ 0x24
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e01d      	b.n	80010ba <dcm_seca+0xfa>
			}
			else if((Tem_SubFunc % 2 != 0) && (Service_Stae == 1))
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <dcm_seca+0xd8>
 800108a:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <dcm_seca+0x174>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <dcm_seca+0xd8>
			{
				NegRes = Dcm_Seca_Conf1.SequenceError;
 8001092:	2324      	movs	r3, #36	@ 0x24
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e010      	b.n	80010ba <dcm_seca+0xfa>
			}
			else
			{
				if (Service_Stae == 0) Service_Stae = 1;
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <dcm_seca+0x174>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <dcm_seca+0xe8>
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <dcm_seca+0x174>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e002      	b.n	80010ae <dcm_seca+0xee>
				else                   Service_Stae = 0;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <dcm_seca+0x174>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
				FuncIdx = Dcm_Seca_Conf1.SecaSubFuncTable[LoopIdx].FuncIndx;
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <dcm_seca+0x178>)
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	737b      	strb	r3, [r7, #13]
			}
		}

	}

	if(NegRes == 0x00)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d126      	bne.n	800110e <dcm_seca+0x14e>
	{
		/*Execute service DID and send Positive response*/
		Dcm_Func_retval = (*dcm_funcs_fp[FuncIdx])();
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <dcm_seca+0x17c>)
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	4798      	blx	r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	817b      	strh	r3, [r7, #10]

		switch (Dcm_Func_retval)
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	2b35      	cmp	r3, #53	@ 0x35
 80010d2:	d010      	beq.n	80010f6 <dcm_seca+0x136>
 80010d4:	2b35      	cmp	r3, #53	@ 0x35
 80010d6:	dc17      	bgt.n	8001108 <dcm_seca+0x148>
 80010d8:	2b33      	cmp	r3, #51	@ 0x33
 80010da:	d00f      	beq.n	80010fc <dcm_seca+0x13c>
 80010dc:	2b33      	cmp	r3, #51	@ 0x33
 80010de:	dc13      	bgt.n	8001108 <dcm_seca+0x148>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <dcm_seca+0x12a>
 80010e4:	2b22      	cmp	r3, #34	@ 0x22
 80010e6:	d00c      	beq.n	8001102 <dcm_seca+0x142>
 80010e8:	e00e      	b.n	8001108 <dcm_seca+0x148>
		{
			case POS_RES:
			{
				/*Send Positive response*/
				MsgInfor->respType = DCM_POS;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010f0:	2201      	movs	r2, #1
 80010f2:	721a      	strb	r2, [r3, #8]
				break;
 80010f4:	e00b      	b.n	800110e <dcm_seca+0x14e>
			}
			case NRC35_INVALID_KEY:
			{
				/*invalid key*/
				NegRes = NRC35_INVALID_KEY;
 80010f6:	2335      	movs	r3, #53	@ 0x35
 80010f8:	73fb      	strb	r3, [r7, #15]
				break;
 80010fa:	e008      	b.n	800110e <dcm_seca+0x14e>
			}
			case NRC33_SECURITY_ACCESS_DENIED:
			{
				/*for further practice*/
				NegRes = NRC33_SECURITY_ACCESS_DENIED;
 80010fc:	2333      	movs	r3, #51	@ 0x33
 80010fe:	73fb      	strb	r3, [r7, #15]
				break;
 8001100:	e005      	b.n	800110e <dcm_seca+0x14e>
			}
			case NRC22_CONDITON_NOTCORRECT:
			{
				/*for further practice*/
				NegRes = NRC22_CONDITON_NOTCORRECT;
 8001102:	2322      	movs	r3, #34	@ 0x22
 8001104:	73fb      	strb	r3, [r7, #15]
				break;
 8001106:	e002      	b.n	800110e <dcm_seca+0x14e>
			}
			default:
			{
				/*for further practice*/
				NegRes = Dcm_Seca_Conf1.GeneralReject;
 8001108:	2310      	movs	r3, #16
 800110a:	73fb      	strb	r3, [r7, #15]
				break;
 800110c:	bf00      	nop
			}
		}

	}
	if(NegRes != 0x00)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <dcm_seca+0x164>
	{
		/*Send negative response*/
		MsgInfor->dataBuff[3] = NegRes;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	711a      	strb	r2, [r3, #4]
		MsgInfor->respType = DCM_NEG;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001120:	2202      	movs	r2, #2
 8001122:	721a      	strb	r2, [r3, #8]
	}

	DCM_NEW_REQ = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <dcm_seca+0x180>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	return;
 800112a:	bf00      	nop
}
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200014f8 	.word	0x200014f8
 8001138:	08006454 	.word	0x08006454
 800113c:	08006428 	.word	0x08006428
 8001140:	20000008 	.word	0x20000008

08001144 <dcm_wdbi>:
	NRC31_DID_NOTSUPPORT,
	NRC10_GENERAL_REJECT
};

void dcm_wdbi(Dcm_Msg_Info* MsgInfor)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t  LoopIdx;
	uint8_t  FuncIdx;
	uint16_t Dcm_Func_retval;

	/*Local variable initialization*/
	Tem_DID = 0x0000;
 800114c:	2300      	movs	r3, #0
 800114e:	817b      	strh	r3, [r7, #10]
	NegRes = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	LoopIdx = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	73bb      	strb	r3, [r7, #14]
	Dcm_Func_retval = 0x0000;
 8001158:	2300      	movs	r3, #0
 800115a:	813b      	strh	r3, [r7, #8]

	if(MsgInfor->numByetReq < 4)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d802      	bhi.n	800116e <dcm_wdbi+0x2a>
	{
		/*check if minimum request length is correct*/
		NegRes = Dcm_Wdbi_Conf1.InvalidLength;
 8001168:	2313      	movs	r3, #19
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e03b      	b.n	80011e6 <dcm_wdbi+0xa2>
	}
	else
	{
		/*Get DID value from request buffer*/
		Tem_DID  = (uint16_t)MsgInfor->dataBuff[2];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	78db      	ldrb	r3, [r3, #3]
 8001172:	817b      	strh	r3, [r7, #10]
		Tem_DID  = Tem_DID<<8;
 8001174:	897b      	ldrh	r3, [r7, #10]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	817b      	strh	r3, [r7, #10]
		Tem_DID |=(uint16_t)MsgInfor->dataBuff[3];
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	461a      	mov	r2, r3
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	4313      	orrs	r3, r2
 8001184:	817b      	strh	r3, [r7, #10]

		/*Search DIDs*/
		for(LoopIdx = 0; LoopIdx < Dcm_Wdbi_Conf1.numDid ; LoopIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	73bb      	strb	r3, [r7, #14]
 800118a:	e00a      	b.n	80011a2 <dcm_wdbi+0x5e>
		{
			if(Dcm_Wdbi_Conf1.WdbiDidTable[LoopIdx].Did == Tem_DID)
 800118c:	4a34      	ldr	r2, [pc, #208]	@ (8001260 <dcm_wdbi+0x11c>)
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	429a      	cmp	r2, r3
 800119a:	d008      	beq.n	80011ae <dcm_wdbi+0x6a>
		for(LoopIdx = 0; LoopIdx < Dcm_Wdbi_Conf1.numDid ; LoopIdx++)
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	3301      	adds	r3, #1
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2203      	movs	r2, #3
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d3ef      	bcc.n	800118c <dcm_wdbi+0x48>
 80011ac:	e000      	b.n	80011b0 <dcm_wdbi+0x6c>
			{
				break;
 80011ae:	bf00      	nop
			}
		}
		if(LoopIdx >= Dcm_Wdbi_Conf1.numDid)
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2203      	movs	r2, #3
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d302      	bcc.n	80011c0 <dcm_wdbi+0x7c>
		{
			NegRes = Dcm_Wdbi_Conf1.DidNotSupport;
 80011ba:	2331      	movs	r3, #49	@ 0x31
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e005      	b.n	80011cc <dcm_wdbi+0x88>
		}
		else
		{
			FuncIdx = Dcm_Wdbi_Conf1.WdbiDidTable[LoopIdx].FuncIndx;
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <dcm_wdbi+0x11c>)
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	737b      	strb	r3, [r7, #13]
		}

		/*DIDs minimum length check*/
		if(MsgInfor->numByetReq < Dcm_Wdbi_Conf1.WdbiDidTable[LoopIdx].DinMinlength)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	4922      	ldr	r1, [pc, #136]	@ (8001260 <dcm_wdbi+0x11c>)
 80011d6:	7bba      	ldrb	r2, [r7, #14]
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	440a      	add	r2, r1
 80011dc:	78d2      	ldrb	r2, [r2, #3]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d201      	bcs.n	80011e6 <dcm_wdbi+0xa2>
		{
			NegRes = Dcm_Wdbi_Conf1.InvalidLength;
 80011e2:	2313      	movs	r3, #19
 80011e4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if(NegRes == 0x00)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d126      	bne.n	800123a <dcm_wdbi+0xf6>
	{
		/*Execute service DID and send Positive response*/
		Dcm_Func_retval = (*dcm_funcs_fp[FuncIdx])();
 80011ec:	7b7b      	ldrb	r3, [r7, #13]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <dcm_wdbi+0x120>)
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	4798      	blx	r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	813b      	strh	r3, [r7, #8]

		switch (Dcm_Func_retval)
 80011fa:	893b      	ldrh	r3, [r7, #8]
 80011fc:	2b33      	cmp	r3, #51	@ 0x33
 80011fe:	d010      	beq.n	8001222 <dcm_wdbi+0xde>
 8001200:	2b33      	cmp	r3, #51	@ 0x33
 8001202:	dc17      	bgt.n	8001234 <dcm_wdbi+0xf0>
 8001204:	2b31      	cmp	r3, #49	@ 0x31
 8001206:	d00f      	beq.n	8001228 <dcm_wdbi+0xe4>
 8001208:	2b31      	cmp	r3, #49	@ 0x31
 800120a:	dc13      	bgt.n	8001234 <dcm_wdbi+0xf0>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <dcm_wdbi+0xd2>
 8001210:	2b22      	cmp	r3, #34	@ 0x22
 8001212:	d00c      	beq.n	800122e <dcm_wdbi+0xea>
 8001214:	e00e      	b.n	8001234 <dcm_wdbi+0xf0>
		{
			case POS_RES:
			{
				/*Send Positive response*/
				MsgInfor->respType = DCM_POS;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800121c:	2201      	movs	r2, #1
 800121e:	721a      	strb	r2, [r3, #8]
				break;
 8001220:	e00b      	b.n	800123a <dcm_wdbi+0xf6>
			}
			case NRC33_SECURITY_ACCESS_DENIED:
			{
				/*for further practice*/
				NegRes = NRC33_SECURITY_ACCESS_DENIED;
 8001222:	2333      	movs	r3, #51	@ 0x33
 8001224:	73fb      	strb	r3, [r7, #15]
				break;
 8001226:	e008      	b.n	800123a <dcm_wdbi+0xf6>
			}
			case NRC31_DID_NOTSUPPORT:
			{
				/*for further practice*/
				NegRes = NRC31_DID_NOTSUPPORT;
 8001228:	2331      	movs	r3, #49	@ 0x31
 800122a:	73fb      	strb	r3, [r7, #15]
				break;
 800122c:	e005      	b.n	800123a <dcm_wdbi+0xf6>
			}
			case NRC22_CONDITON_NOTCORRECT:
			{
				/*for further practice*/
				NegRes = NRC22_CONDITON_NOTCORRECT;
 800122e:	2322      	movs	r3, #34	@ 0x22
 8001230:	73fb      	strb	r3, [r7, #15]
				break;
 8001232:	e002      	b.n	800123a <dcm_wdbi+0xf6>
			}
			default:
			{
				/*for further practice*/
				NegRes = Dcm_Wdbi_Conf1.GeneralReject;
 8001234:	2310      	movs	r3, #16
 8001236:	73fb      	strb	r3, [r7, #15]
				break;
 8001238:	bf00      	nop
			}
		}

	}
	if(NegRes != 0x00)
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <dcm_wdbi+0x10c>
	{
		/*Send negative response*/
		MsgInfor->dataBuff[3] = NegRes;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	711a      	strb	r2, [r3, #4]
		MsgInfor->respType = DCM_NEG;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124c:	2202      	movs	r2, #2
 800124e:	721a      	strb	r2, [r3, #8]
	}

	DCM_NEW_REQ = 1;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <dcm_wdbi+0x124>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
	return;
 8001256:	bf00      	nop
}
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0800645c 	.word	0x0800645c
 8001264:	08006428 	.word	0x08006428
 8001268:	20000008 	.word	0x20000008

0800126c <main>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);


int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0


	uint16_t i,j = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	80bb      	strh	r3, [r7, #4]
	uint16_t Consecutive_Cntr = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	807b      	strh	r3, [r7, #2]

  HAL_Init();
 800127a:	f000 ff79 	bl	8002170 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f927 	bl	80014d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 fa73 	bl	800176c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001286:	f000 f98d 	bl	80015a4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800128a:	f000 f9e7 	bl	800165c <MX_CAN2_Init>
  MX_USART3_UART_Init();
 800128e:	f000 fa43 	bl	8001718 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_CAN1_Setup(ProtocolI_RX);
 8001292:	4b82      	ldr	r3, [pc, #520]	@ (800149c <main+0x230>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fafc 	bl	8001894 <MX_CAN1_Setup>
  MX_CAN2_Setup(ProtocolI_TX);
 800129c:	4b80      	ldr	r3, [pc, #512]	@ (80014a0 <main+0x234>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fb3f 	bl	8001924 <MX_CAN2_Setup>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80012a6:	4b7f      	ldr	r3, [pc, #508]	@ (80014a4 <main+0x238>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	4b7d      	ldr	r3, [pc, #500]	@ (80014a4 <main+0x238>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	60da      	str	r2, [r3, #12]
//      USART3_SendString((uint8_t *)"-> IG ON \n");
//      delay(20);
//    }


    if(REQ_BUFFER[0] != 0)
 80012b6:	4b7c      	ldr	r3, [pc, #496]	@ (80014a8 <main+0x23c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0fb      	beq.n	80012b6 <main+0x4a>
    {
      delay(50);
 80012be:	2032      	movs	r0, #50	@ 0x32
 80012c0:	f000 fc42 	bl	8001b48 <delay>
      USART3_SendString((uint8_t*)" \n");
 80012c4:	4879      	ldr	r0, [pc, #484]	@ (80014ac <main+0x240>)
 80012c6:	f000 fb77 	bl	80019b8 <USART3_SendString>
      if(NumBytesReq <= 7)
 80012ca:	4b79      	ldr	r3, [pc, #484]	@ (80014b0 <main+0x244>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	d822      	bhi.n	8001318 <main+0xac>
      {
        CAN1_DATA_TX[0] = NumBytesReq;
 80012d2:	4b77      	ldr	r3, [pc, #476]	@ (80014b0 <main+0x244>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b76      	ldr	r3, [pc, #472]	@ (80014b4 <main+0x248>)
 80012da:	701a      	strb	r2, [r3, #0]
        for(i=1; i < 8;i++)
 80012dc:	2301      	movs	r3, #1
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	e009      	b.n	80012f6 <main+0x8a>
        {
          CAN1_DATA_TX[i] = REQ_BUFFER[i-1];
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	496f      	ldr	r1, [pc, #444]	@ (80014a8 <main+0x23c>)
 80012ea:	5c89      	ldrb	r1, [r1, r2]
 80012ec:	4a71      	ldr	r2, [pc, #452]	@ (80014b4 <main+0x248>)
 80012ee:	54d1      	strb	r1, [r2, r3]
        for(i=1; i < 8;i++)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	3301      	adds	r3, #1
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9f2      	bls.n	80012e2 <main+0x76>
        }

      PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 80012fc:	4b6e      	ldr	r3, [pc, #440]	@ (80014b8 <main+0x24c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	496c      	ldr	r1, [pc, #432]	@ (80014b4 <main+0x248>)
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb71 	bl	80019ec <PrintCANLog>
      HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 800130a:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <main+0x250>)
 800130c:	4a69      	ldr	r2, [pc, #420]	@ (80014b4 <main+0x248>)
 800130e:	496a      	ldr	r1, [pc, #424]	@ (80014b8 <main+0x24c>)
 8001310:	486b      	ldr	r0, [pc, #428]	@ (80014c0 <main+0x254>)
 8001312:	f001 f9e3 	bl	80026dc <HAL_CAN_AddTxMessage>
 8001316:	e0b6      	b.n	8001486 <main+0x21a>
      }
      else
      {
		  j = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	80bb      	strh	r3, [r7, #4]
		  Flg_Consecutive = 0;
 800131c:	4b69      	ldr	r3, [pc, #420]	@ (80014c4 <main+0x258>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
		  Num_Consecutive_Tester = 0;
 8001322:	4b69      	ldr	r3, [pc, #420]	@ (80014c8 <main+0x25c>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
		  Consecutive_Cntr = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	807b      	strh	r3, [r7, #2]

		  Num_Consecutive_Tester = NumBytesReq - 6;
 800132c:	4b60      	ldr	r3, [pc, #384]	@ (80014b0 <main+0x244>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	3b06      	subs	r3, #6
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b64      	ldr	r3, [pc, #400]	@ (80014c8 <main+0x25c>)
 8001336:	801a      	strh	r2, [r3, #0]
		  if(Num_Consecutive_Tester % 7 == 0)
 8001338:	4b63      	ldr	r3, [pc, #396]	@ (80014c8 <main+0x25c>)
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	4b63      	ldr	r3, [pc, #396]	@ (80014cc <main+0x260>)
 800133e:	fba3 1302 	umull	r1, r3, r3, r2
 8001342:	1ad1      	subs	r1, r2, r3
 8001344:	0849      	lsrs	r1, r1, #1
 8001346:	440b      	add	r3, r1
 8001348:	0899      	lsrs	r1, r3, #2
 800134a:	460b      	mov	r3, r1
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a5b      	subs	r3, r3, r1
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <main+0x106>
		  {
			Num_Consecutive_Tester /=7 ;
 8001358:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <main+0x25c>)
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <main+0x260>)
 800135e:	fba3 1302 	umull	r1, r3, r3, r2
 8001362:	1ad2      	subs	r2, r2, r3
 8001364:	0852      	lsrs	r2, r2, #1
 8001366:	4413      	add	r3, r2
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b56      	ldr	r3, [pc, #344]	@ (80014c8 <main+0x25c>)
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	e011      	b.n	8001396 <main+0x12a>
		  }
		  else
		  {
			Num_Consecutive_Tester /=7;
 8001372:	4b55      	ldr	r3, [pc, #340]	@ (80014c8 <main+0x25c>)
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <main+0x260>)
 8001378:	fba3 1302 	umull	r1, r3, r3, r2
 800137c:	1ad2      	subs	r2, r2, r3
 800137e:	0852      	lsrs	r2, r2, #1
 8001380:	4413      	add	r3, r2
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b50      	ldr	r3, [pc, #320]	@ (80014c8 <main+0x25c>)
 8001388:	801a      	strh	r2, [r3, #0]
			Num_Consecutive_Tester +=1;
 800138a:	4b4f      	ldr	r3, [pc, #316]	@ (80014c8 <main+0x25c>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b4d      	ldr	r3, [pc, #308]	@ (80014c8 <main+0x25c>)
 8001394:	801a      	strh	r2, [r3, #0]
		  }

		  CAN1_DATA_TX[0] = ((NumBytesReq >> 8) + 0x10) &0x1F;
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <main+0x244>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3310      	adds	r3, #16
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <main+0x248>)
 80013ac:	701a      	strb	r2, [r3, #0]
		  CAN1_DATA_TX[1] = NumBytesReq;
 80013ae:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <main+0x244>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <main+0x248>)
 80013b6:	705a      	strb	r2, [r3, #1]
		  CAN1_DATA_TX[2] = REQ_BUFFER[0];
 80013b8:	4b3b      	ldr	r3, [pc, #236]	@ (80014a8 <main+0x23c>)
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <main+0x248>)
 80013be:	709a      	strb	r2, [r3, #2]
		  CAN1_DATA_TX[3] = REQ_BUFFER[1];
 80013c0:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <main+0x23c>)
 80013c2:	785a      	ldrb	r2, [r3, #1]
 80013c4:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <main+0x248>)
 80013c6:	70da      	strb	r2, [r3, #3]
		  CAN1_DATA_TX[4] = REQ_BUFFER[2];
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <main+0x23c>)
 80013ca:	789a      	ldrb	r2, [r3, #2]
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <main+0x248>)
 80013ce:	711a      	strb	r2, [r3, #4]
		  CAN1_DATA_TX[5] = REQ_BUFFER[3];
 80013d0:	4b35      	ldr	r3, [pc, #212]	@ (80014a8 <main+0x23c>)
 80013d2:	78da      	ldrb	r2, [r3, #3]
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <main+0x248>)
 80013d6:	715a      	strb	r2, [r3, #5]
		  CAN1_DATA_TX[6] = REQ_BUFFER[4];
 80013d8:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <main+0x23c>)
 80013da:	791a      	ldrb	r2, [r3, #4]
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <main+0x248>)
 80013de:	719a      	strb	r2, [r3, #6]
		  CAN1_DATA_TX[7] = REQ_BUFFER[5];
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <main+0x23c>)
 80013e2:	795a      	ldrb	r2, [r3, #5]
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <main+0x248>)
 80013e6:	71da      	strb	r2, [r3, #7]

		  PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 80013e8:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <main+0x24c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4931      	ldr	r1, [pc, #196]	@ (80014b4 <main+0x248>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fafb 	bl	80019ec <PrintCANLog>
		  HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 80013f6:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <main+0x250>)
 80013f8:	4a2e      	ldr	r2, [pc, #184]	@ (80014b4 <main+0x248>)
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <main+0x24c>)
 80013fc:	4830      	ldr	r0, [pc, #192]	@ (80014c0 <main+0x254>)
 80013fe:	f001 f96d 	bl	80026dc <HAL_CAN_AddTxMessage>

		  j = 6;
 8001402:	2306      	movs	r3, #6
 8001404:	80bb      	strh	r3, [r7, #4]

		  while(Num_Consecutive_Tester > 0)
 8001406:	e03a      	b.n	800147e <main+0x212>
		  {
		  if(Flg_Consecutive == 0x01)
 8001408:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <main+0x258>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d136      	bne.n	800147e <main+0x212>
		  {
          Flg_Consecutive = 0;
 8001410:	4b2c      	ldr	r3, [pc, #176]	@ (80014c4 <main+0x258>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
          CAN1_DATA_TX[0] = (Consecutive_Cntr & 0x0F) + 0x20;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3320      	adds	r3, #32
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <main+0x248>)
 8001426:	701a      	strb	r2, [r3, #0]
          for(i=0;i<7;i++)
 8001428:	2300      	movs	r3, #0
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	e00b      	b.n	8001446 <main+0x1da>
          {
            CAN1_DATA_TX[i-1] = REQ_BUFFER[i+j];
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	88bb      	ldrh	r3, [r7, #4]
 8001432:	441a      	add	r2, r3
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	3b01      	subs	r3, #1
 8001438:	491b      	ldr	r1, [pc, #108]	@ (80014a8 <main+0x23c>)
 800143a:	5c89      	ldrb	r1, [r1, r2]
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <main+0x248>)
 800143e:	54d1      	strb	r1, [r2, r3]
          for(i=0;i<7;i++)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	3301      	adds	r3, #1
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d9f0      	bls.n	800142e <main+0x1c2>
          }


          j +=7;
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	3307      	adds	r3, #7
 8001450:	80bb      	strh	r3, [r7, #4]
          PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <main+0x24c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4916      	ldr	r1, [pc, #88]	@ (80014b4 <main+0x248>)
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fac6 	bl	80019ec <PrintCANLog>
          HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <main+0x250>)
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <main+0x248>)
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <main+0x24c>)
 8001466:	4816      	ldr	r0, [pc, #88]	@ (80014c0 <main+0x254>)
 8001468:	f001 f938 	bl	80026dc <HAL_CAN_AddTxMessage>
          Num_Consecutive_Tester --;
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <main+0x25c>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <main+0x25c>)
 8001476:	801a      	strh	r2, [r3, #0]
          Consecutive_Cntr ++;
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	3301      	adds	r3, #1
 800147c:	807b      	strh	r3, [r7, #2]
		  while(Num_Consecutive_Tester > 0)
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <main+0x25c>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1c0      	bne.n	8001408 <main+0x19c>
//      USART3_SendString((uint8_t*)" \n");
//    }

   }

  memset(&REQ_BUFFER,0x00,4096);
 8001486:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800148a:	2100      	movs	r1, #0
 800148c:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <main+0x23c>)
 800148e:	f003 ff46 	bl	800531e <memset>
  NumBytesReq = 0;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <main+0x244>)
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
    if(REQ_BUFFER[0] != 0)
 8001498:	e70d      	b.n	80012b6 <main+0x4a>
 800149a:	bf00      	nop
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
 80014a4:	2000154c 	.word	0x2000154c
 80014a8:	20001658 	.word	0x20001658
 80014ac:	080063d8 	.word	0x080063d8
 80014b0:	20001654 	.word	0x20001654
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20001594 	.word	0x20001594
 80014bc:	2000164c 	.word	0x2000164c
 80014c0:	200014fc 	.word	0x200014fc
 80014c4:	2000265c 	.word	0x2000265c
 80014c8:	2000265a 	.word	0x2000265a
 80014cc:	24924925 	.word	0x24924925

080014d0 <SystemClock_Config>:

}
}
}
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	@ 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 ff1d 	bl	800531e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <SystemClock_Config+0xcc>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <SystemClock_Config+0xd0>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001540:	2308      	movs	r3, #8
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;//168
 8001544:	2340      	movs	r3, #64	@ 0x40
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f891 	bl	800367c <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001560:	f000 fb00 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001570:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f002 faf2 	bl	8003b6c <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158e:	f000 fae9 	bl	8001b64 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	@ 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80015a8:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <MX_CAN1_Init+0xb0>)
 80015ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b4:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015c0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80015c2:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015c4:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80015c8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015cc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80015d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015da:	2200      	movs	r2, #0
 80015dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015f6:	4816      	ldr	r0, [pc, #88]	@ (8001650 <MX_CAN1_Init+0xac>)
 80015f8:	f000 fe50 	bl	800229c <HAL_CAN_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001602:	f000 faaf 	bl	8001b64 <Error_Handler>
  }


  CAN1_sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001608:	2201      	movs	r2, #1
 800160a:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_CAN1_Init+0xb4>)
 800160e:	220e      	movs	r2, #14
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN1_sFilterConfig.FilterBank = 8;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001614:	2208      	movs	r2, #8
 8001616:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_CAN1_Init+0xb4>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001626:	2201      	movs	r2, #1
 8001628:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.FilterIdHigh = 0x0A2 << 5;//CANID
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_CAN1_Init+0xb4>)
 800162c:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 8001630:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0x0000;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0x0000; //(0x7FF << 5) ; //0xFFE0
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MX_CAN1_Init+0xb4>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  CAN1_sFilterConfig.FilterActivation = ENABLE;
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <MX_CAN1_Init+0xb4>)
 8001646:	2201      	movs	r2, #1
 8001648:	621a      	str	r2, [r3, #32]

  /* USER CODE END CAN1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200014fc 	.word	0x200014fc
 8001654:	40006400 	.word	0x40006400
 8001658:	200015c8 	.word	0x200015c8

0800165c <MX_CAN2_Init>:

static void MX_CAN2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0


  hcan2.Instance = CAN2;
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001662:	4a2b      	ldr	r2, [pc, #172]	@ (8001710 <MX_CAN2_Init+0xb4>)
 8001664:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <MX_CAN2_Init+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001674:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001678:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <MX_CAN2_Init+0xb0>)
 800167c:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001680:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001684:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001688:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <MX_CAN2_Init+0xb0>)
 800168c:	2200      	movs	r2, #0
 800168e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001692:	2200      	movs	r2, #0
 8001694:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <MX_CAN2_Init+0xb0>)
 8001698:	2200      	movs	r2, #0
 800169a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_CAN2_Init+0xb0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_CAN2_Init+0xb0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_CAN2_Init+0xb0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80016ae:	4817      	ldr	r0, [pc, #92]	@ (800170c <MX_CAN2_Init+0xb0>)
 80016b0:	f000 fdf4 	bl	800229c <HAL_CAN_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80016ba:	f000 fa53 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN2_sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	621a      	str	r2, [r3, #32]
  CAN2_sFilterConfig.SlaveStartFilterBank=14;
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016c6:	220e      	movs	r2, #14
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
  CAN2_sFilterConfig.FilterBank=19;
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016cc:	2213      	movs	r2, #19
 80016ce:	615a      	str	r2, [r3, #20]
  CAN2_sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 80016d0:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016de:	2201      	movs	r2, #1
 80016e0:	61da      	str	r2, [r3, #28]
  CAN2_sFilterConfig.FilterIdHigh = 0x012 << 5;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016e4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80016e8:	601a      	str	r2, [r3, #0]
  CAN2_sFilterConfig.FilterIdLow = 0x0000;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  CAN2_sFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFE0
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  CAN2_sFilterConfig.FilterFIFOAssignment = 0;
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <MX_CAN2_Init+0xb8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  CAN2_sFilterConfig.FilterActivation = ENABLE;
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <MX_CAN2_Init+0xb8>)
 8001704:	2201      	movs	r2, #1
 8001706:	621a      	str	r2, [r3, #32]
  /* USER CODE END CAN2_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20001524 	.word	0x20001524
 8001710:	40006800 	.word	0x40006800
 8001714:	20001624 	.word	0x20001624

08001718 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_USART3_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART3_UART_Init+0x4c>)
 8001750:	f002 fc2c 	bl	8003fac <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 fa03 	bl	8001b64 <Error_Handler>
  }

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000154c 	.word	0x2000154c
 8001768:	40004800 	.word	0x40004800

0800176c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b3f      	ldr	r3, [pc, #252]	@ (8001884 <MX_GPIO_Init+0x118>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a3e      	ldr	r2, [pc, #248]	@ (8001884 <MX_GPIO_Init+0x118>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b3c      	ldr	r3, [pc, #240]	@ (8001884 <MX_GPIO_Init+0x118>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a29      	ldr	r2, [pc, #164]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <MX_GPIO_Init+0x118>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80017f2:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 80017f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4820      	ldr	r0, [pc, #128]	@ (8001888 <MX_GPIO_Init+0x11c>)
 8001808:	f001 fd5e 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800180c:	2301      	movs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001810:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	481a      	ldr	r0, [pc, #104]	@ (800188c <MX_GPIO_Init+0x120>)
 8001822:	f001 fd51 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001834:	2301      	movs	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4813      	ldr	r0, [pc, #76]	@ (800188c <MX_GPIO_Init+0x120>)
 8001840:	f001 fd42 	bl	80032c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <MX_GPIO_Init+0x124>)
 800185c:	f001 fd34 	bl	80032c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2101      	movs	r1, #1
 8001864:	480a      	ldr	r0, [pc, #40]	@ (8001890 <MX_GPIO_Init+0x124>)
 8001866:	f001 fecb 	bl	8003600 <HAL_GPIO_WritePin>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2103      	movs	r1, #3
 800186e:	2006      	movs	r0, #6
 8001870:	f001 fc61 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001874:	2006      	movs	r0, #6
 8001876:	f001 fc7a 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400

08001894 <MX_CAN1_Setup>:

void MX_CAN1_Setup(uint32_t CANID)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	CAN1_sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <MX_CAN1_Setup+0x84>)
 800189e:	2201      	movs	r2, #1
 80018a0:	621a      	str	r2, [r3, #32]
	CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018a4:	220e      	movs	r2, #14
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
	CAN1_sFilterConfig.FilterBank = 8;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	615a      	str	r2, [r3, #20]
	CAN1_sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
	CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018ba:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018bc:	2201      	movs	r2, #1
 80018be:	61da      	str	r2, [r3, #28]
	CAN1_sFilterConfig.FilterIdHigh = CANID << 5;//CANID
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	015b      	lsls	r3, r3, #5
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018c6:	6013      	str	r3, [r2, #0]
	CAN1_sFilterConfig.FilterIdLow = 0x0000;
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
	CAN1_sFilterConfig.FilterMaskIdHigh = 0x0000; //(0x7FF << 5) ; //0xFFE0
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
	CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 80018d4:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
	CAN1_sFilterConfig.FilterActivation = ENABLE;
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018dc:	2201      	movs	r2, #1
 80018de:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 80018e0:	490d      	ldr	r1, [pc, #52]	@ (8001918 <MX_CAN1_Setup+0x84>)
 80018e2:	480e      	ldr	r0, [pc, #56]	@ (800191c <MX_CAN1_Setup+0x88>)
 80018e4:	f000 fdd6 	bl	8002494 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <MX_CAN1_Setup+0x88>)
 80018ea:	f000 feb3 	bl	8002654 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80018ee:	2102      	movs	r1, #2
 80018f0:	480a      	ldr	r0, [pc, #40]	@ (800191c <MX_CAN1_Setup+0x88>)
 80018f2:	f001 f8e5 	bl	8002ac0 <HAL_CAN_ActivateNotification>
	CAN1_pHeader.DLC = 8;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <MX_CAN1_Setup+0x8c>)
 80018f8:	2208      	movs	r2, #8
 80018fa:	611a      	str	r2, [r3, #16]
	CAN1_pHeader.IDE = CAN_ID_STD;
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <MX_CAN1_Setup+0x8c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
	CAN1_pHeader.RTR = CAN_RTR_DATA;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <MX_CAN1_Setup+0x8c>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
	CAN1_pHeader.StdId = CANID;
 8001908:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <MX_CAN1_Setup+0x8c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200015c8 	.word	0x200015c8
 800191c:	200014fc 	.word	0x200014fc
 8001920:	20001594 	.word	0x20001594

08001924 <MX_CAN2_Setup>:

void MX_CAN2_Setup(uint32_t CANID)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    CAN2_sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_CAN2_Setup+0x88>)
 800192e:	2201      	movs	r2, #1
 8001930:	621a      	str	r2, [r3, #32]
    CAN2_sFilterConfig.SlaveStartFilterBank=14;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001934:	220e      	movs	r2, #14
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    CAN2_sFilterConfig.FilterBank=19;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_CAN2_Setup+0x88>)
 800193a:	2213      	movs	r2, #19
 800193c:	615a      	str	r2, [r3, #20]
    CAN2_sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800193e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
    CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
    CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800194a:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <MX_CAN2_Setup+0x88>)
 800194c:	2201      	movs	r2, #1
 800194e:	61da      	str	r2, [r3, #28]
    CAN2_sFilterConfig.FilterIdHigh = CANID <<5;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	015b      	lsls	r3, r3, #5
 8001954:	4a15      	ldr	r2, [pc, #84]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001956:	6013      	str	r3, [r2, #0]
    CAN2_sFilterConfig.FilterIdLow = 0x0000;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_CAN2_Setup+0x88>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
    CAN2_sFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFE0
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    CAN2_sFilterConfig.FilterFIFOAssignment = 0;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_CAN2_Setup+0x88>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
    CAN2_sFilterConfig.FilterActivation = ENABLE;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001972:	2201      	movs	r2, #1
 8001974:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8001976:	490d      	ldr	r1, [pc, #52]	@ (80019ac <MX_CAN2_Setup+0x88>)
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <MX_CAN2_Setup+0x8c>)
 800197a:	f000 fd8b 	bl	8002494 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 800197e:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_CAN2_Setup+0x8c>)
 8001980:	f000 fe68 	bl	8002654 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001984:	2102      	movs	r1, #2
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <MX_CAN2_Setup+0x8c>)
 8001988:	f001 f89a 	bl	8002ac0 <HAL_CAN_ActivateNotification>

	CAN2_pHeader.DLC = 8;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_CAN2_Setup+0x90>)
 800198e:	2208      	movs	r2, #8
 8001990:	611a      	str	r2, [r3, #16]
	CAN2_pHeader.IDE = CAN_ID_STD;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_CAN2_Setup+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
	CAN2_pHeader.RTR = CAN_RTR_DATA;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_CAN2_Setup+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
	CAN2_pHeader.StdId = CANID;
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <MX_CAN2_Setup+0x90>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20001624 	.word	0x20001624
 80019b0:	20001524 	.word	0x20001524
 80019b4:	200015f0 	.word	0x200015f0

080019b8 <USART3_SendString>:

void USART3_SendString(uint8_t *ch)


{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 80019c0:	e009      	b.n	80019d6 <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	2201      	movs	r2, #1
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <USART3_SendString+0x30>)
 80019cc:	f002 fb3e 	bl	800404c <HAL_UART_Transmit>
      ch++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f1      	bne.n	80019c2 <USART3_SendString+0xa>
   }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000154c 	.word	0x2000154c

080019ec <PrintCANLog>:

void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 80019fc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aec <PrintCANLog+0x100>)
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4611      	mov	r1, r2
 8001a06:	8019      	strh	r1, [r3, #0]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	0c12      	lsrs	r2, r2, #16
 8001a0c:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 8001a0e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001a12:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 8001a14:	4a36      	ldr	r2, [pc, #216]	@ (8001af0 <PrintCANLog+0x104>)
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a1e:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <PrintCANLog+0x108>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4933      	ldr	r1, [pc, #204]	@ (8001af8 <PrintCANLog+0x10c>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fc13 	bl	8005258 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ffbe 	bl	80019b8 <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 8001a3c:	482f      	ldr	r0, [pc, #188]	@ (8001afc <PrintCANLog+0x110>)
 8001a3e:	f7ff ffbb 	bl	80019b8 <USART3_SendString>

	sprintf(bufID,"%03X",CANID);
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	492d      	ldr	r1, [pc, #180]	@ (8001b00 <PrintCANLog+0x114>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fc04 	bl	8005258 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	83fb      	strh	r3, [r7, #30]
 8001a54:	e00a      	b.n	8001a6c <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 8001a56:	8bfa      	ldrh	r2, [r7, #30]
 8001a58:	8bfb      	ldrh	r3, [r7, #30]
 8001a5a:	3220      	adds	r2, #32
 8001a5c:	443a      	add	r2, r7
 8001a5e:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8001a62:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <PrintCANLog+0x118>)
 8001a64:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8001a66:	8bfb      	ldrh	r3, [r7, #30]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	83fb      	strh	r3, [r7, #30]
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d9f1      	bls.n	8001a56 <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8001a72:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <PrintCANLog+0x118>)
 8001a74:	223a      	movs	r2, #58	@ 0x3a
 8001a76:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8001a78:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <PrintCANLog+0x118>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8001a7e:	2300      	movs	r3, #0
 8001a80:	83fb      	strh	r3, [r7, #30]
 8001a82:	e025      	b.n	8001ad0 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8001a84:	8bfb      	ldrh	r3, [r7, #30]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	491d      	ldr	r1, [pc, #116]	@ (8001b08 <PrintCANLog+0x11c>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fbdf 	bl	8005258 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8001a9a:	8bfa      	ldrh	r2, [r7, #30]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3305      	adds	r3, #5
 8001aa4:	7d39      	ldrb	r1, [r7, #20]
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <PrintCANLog+0x118>)
 8001aa8:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8001aaa:	8bfa      	ldrh	r2, [r7, #30]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3306      	adds	r3, #6
 8001ab4:	7d79      	ldrb	r1, [r7, #21]
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <PrintCANLog+0x118>)
 8001ab8:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8001aba:	8bfa      	ldrh	r2, [r7, #30]
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3307      	adds	r3, #7
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b04 <PrintCANLog+0x118>)
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8001aca:	8bfb      	ldrh	r3, [r7, #30]
 8001acc:	3301      	adds	r3, #1
 8001ace:	83fb      	strh	r3, [r7, #30]
 8001ad0:	8bfb      	ldrh	r3, [r7, #30]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d9d6      	bls.n	8001a84 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <PrintCANLog+0x118>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <PrintCANLog+0x118>)
 8001ade:	f7ff ff6b 	bl	80019b8 <USART3_SendString>
}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	080063f4 	.word	0x080063f4
 8001af0:	080063f8 	.word	0x080063f8
 8001af4:	20002660 	.word	0x20002660
 8001af8:	080063dc 	.word	0x080063dc
 8001afc:	080063e0 	.word	0x080063e0
 8001b00:	080063e4 	.word	0x080063e4
 8001b04:	2000002c 	.word	0x2000002c
 8001b08:	080063ec 	.word	0x080063ec

08001b0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_UART_RxCpltCallback+0x30>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_UART_RxCpltCallback+0x34>)
 8001b1c:	7819      	ldrb	r1, [r3, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_UART_RxCpltCallback+0x38>)
 8001b20:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_UART_RxCpltCallback+0x30>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <HAL_UART_RxCpltCallback+0x30>)
 8001b2c:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20001654 	.word	0x20001654
 8001b40:	20002658 	.word	0x20002658
 8001b44:	20001658 	.word	0x20001658

08001b48 <delay>:

void delay(uint16_t delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fb7d 	bl	8002254 <HAL_Delay>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <Error_Handler>:
//    }
//}
//}

void Error_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  __disable_irq();
  USART3_SendString((unsigned char *)"Error Detected\n");
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <Error_Handler+0x14>)
 8001b6e:	f7ff ff23 	bl	80019b8 <USART3_SendString>
  while (1)
 8001b72:	bf00      	nop
 8001b74:	e7fd      	b.n	8001b72 <Error_Handler+0xe>
 8001b76:	bf00      	nop
 8001b78:	08006400 	.word	0x08006400

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_MspInit+0x4c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	@ 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <HAL_CAN_MspInit+0x148>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d13e      	bne.n	8001c6c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001bf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bf8:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10d      	bne.n	8001c1c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	4b45      	ldr	r3, [pc, #276]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c10:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b3e      	ldr	r3, [pc, #248]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a3d      	ldr	r2, [pc, #244]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4832      	ldr	r0, [pc, #200]	@ (8001d20 <HAL_CAN_MspInit+0x154>)
 8001c56:	f001 fb37 	bl	80032c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	2014      	movs	r0, #20
 8001c60:	f001 fa69 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c64:	2014      	movs	r0, #20
 8001c66:	f001 fa82 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c6a:	e04f      	b.n	8001d0c <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2c      	ldr	r2, [pc, #176]	@ (8001d24 <HAL_CAN_MspInit+0x158>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d14a      	bne.n	8001d0c <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a27      	ldr	r2, [pc, #156]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001c9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_CAN_MspInit+0x14c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_CAN_MspInit+0x150>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cdc:	2360      	movs	r3, #96	@ 0x60
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001cec:	2309      	movs	r3, #9
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <HAL_CAN_MspInit+0x15c>)
 8001cf8:	f001 fae6 	bl	80032c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2102      	movs	r1, #2
 8001d00:	2040      	movs	r0, #64	@ 0x40
 8001d02:	f001 fa18 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001d06:	2040      	movs	r0, #64	@ 0x40
 8001d08:	f001 fa31 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	@ 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40006400 	.word	0x40006400
 8001d18:	20002664 	.word	0x20002664
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40006800 	.word	0x40006800
 8001d28:	40020400 	.word	0x40020400

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_UART_MspInit+0x94>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d134      	bne.n	8001db8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_UART_MspInit+0x98>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4809      	ldr	r0, [pc, #36]	@ (8001dc8 <HAL_UART_MspInit+0x9c>)
 8001da4:	f001 fa90 	bl	80032c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2101      	movs	r1, #1
 8001dac:	2027      	movs	r0, #39	@ 0x27
 8001dae:	f001 f9c2 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001db2:	2027      	movs	r0, #39	@ 0x27
 8001db4:	f001 f9db 	bl	800316e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40004800 	.word	0x40004800
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020800 	.word	0x40020800

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e24:	f000 f9f6 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <SysTick_Handler+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a02      	ldr	r2, [pc, #8]	@ (8001e38 <SysTick_Handler+0x18>)
 8001e30:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20002660 	.word	0x20002660

08001e3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f001 fbf7 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <CAN1_RX0_IRQHandler+0x1c>)
 8001e52:	f000 fe5b 	bl	8002b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
 8001e56:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <CAN1_RX0_IRQHandler+0x20>)
 8001e58:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <CAN1_RX0_IRQHandler+0x24>)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <CAN1_RX0_IRQHandler+0x1c>)
 8001e5e:	f000 fd0d 	bl	800287c <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200014fc 	.word	0x200014fc
 8001e6c:	20000014 	.word	0x20000014
 8001e70:	200015ac 	.word	0x200015ac

08001e74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <USART3_IRQHandler+0x18>)
 8001e7a:	f002 f997 	bl	80041ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <USART3_IRQHandler+0x1c>)
 8001e82:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <USART3_IRQHandler+0x18>)
 8001e84:	f002 f96d 	bl	8004162 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000154c 	.word	0x2000154c
 8001e90:	20002658 	.word	0x20002658

08001e94 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
    HAL_CAN_IRQHandler(&hcan2);
 8001e9a:	482b      	ldr	r0, [pc, #172]	@ (8001f48 <CAN2_RX0_IRQHandler+0xb4>)
 8001e9c:	f000 fe36 	bl	8002b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <CAN2_RX0_IRQHandler+0xb8>)
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <CAN2_RX0_IRQHandler+0xbc>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4828      	ldr	r0, [pc, #160]	@ (8001f48 <CAN2_RX0_IRQHandler+0xb4>)
 8001ea8:	f000 fce8 	bl	800287c <HAL_CAN_GetRxMessage>

	CAN_TP2DCM(CAN2_pHeaderRx.StdId, CAN2_DATA_RX);
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <CAN2_RX0_IRQHandler+0xbc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4926      	ldr	r1, [pc, #152]	@ (8001f4c <CAN2_RX0_IRQHandler+0xb8>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb54 	bl	8000560 <CAN_TP2DCM>
		CAN_DCM2TP();
 8001eb8:	f7fe fd1e 	bl	80008f8 <CAN_DCM2TP>

		if(Dcm_Msg_Info_s.respType != DCM_NORESP)
 8001ebc:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <CAN2_RX0_IRQHandler+0xc0>)
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec2:	7a1b      	ldrb	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d03b      	beq.n	8001f40 <CAN2_RX0_IRQHandler+0xac>
		{
			memset(&CAN2_DATA_TX,0x00,8);
 8001ec8:	2208      	movs	r2, #8
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4822      	ldr	r0, [pc, #136]	@ (8001f58 <CAN2_RX0_IRQHandler+0xc4>)
 8001ece:	f003 fa26 	bl	800531e <memset>
			if((Dcm_Msg_Info_s.dataBuff[0] & 0xF0) == 0x00)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <CAN2_RX0_IRQHandler+0xc0>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d104      	bne.n	8001ee8 <CAN2_RX0_IRQHandler+0x54>
				NumByteSend = Dcm_Msg_Info_s.dataBuff[0] + 1;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <CAN2_RX0_IRQHandler+0xc0>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e001      	b.n	8001eec <CAN2_RX0_IRQHandler+0x58>
			else
				NumByteSend = 8;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	71fb      	strb	r3, [r7, #7]

			for(LoopIndx = 0; LoopIndx < NumByteSend; LoopIndx++)
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e010      	b.n	8001f16 <CAN2_RX0_IRQHandler+0x82>
			{
				CAN2_DATA_TX[LoopIndx] = Dcm_Msg_Info_s.dataBuff[LoopIndx];
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <CAN2_RX0_IRQHandler+0xc0>)
 8001f02:	440b      	add	r3, r1
 8001f04:	7859      	ldrb	r1, [r3, #1]
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <CAN2_RX0_IRQHandler+0xc4>)
 8001f08:	5499      	strb	r1, [r3, r2]
			for(LoopIndx = 0; LoopIndx < NumByteSend; LoopIndx++)
 8001f0a:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <CAN2_RX0_IRQHandler+0xc8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8e9      	bhi.n	8001ef4 <CAN2_RX0_IRQHandler+0x60>
			}
			if((CAN2_DATA_TX[0] & 0xF0) == 0x20)
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <CAN2_RX0_IRQHandler+0xc4>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d103      	bne.n	8001f34 <CAN2_RX0_IRQHandler+0xa0>
			{
				Flg_Consecutive = 0x01;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <CAN2_RX0_IRQHandler+0xcc>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
			{
				HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox);
			}
		}
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001f32:	e005      	b.n	8001f40 <CAN2_RX0_IRQHandler+0xac>
				HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <CAN2_RX0_IRQHandler+0xd0>)
 8001f36:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <CAN2_RX0_IRQHandler+0xc4>)
 8001f38:	490b      	ldr	r1, [pc, #44]	@ (8001f68 <CAN2_RX0_IRQHandler+0xd4>)
 8001f3a:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <CAN2_RX0_IRQHandler+0xb4>)
 8001f3c:	f000 fbce 	bl	80026dc <HAL_CAN_AddTxMessage>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20001524 	.word	0x20001524
 8001f4c:	20000024 	.word	0x20000024
 8001f50:	20001608 	.word	0x20001608
 8001f54:	200004e8 	.word	0x200004e8
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	20002668 	.word	0x20002668
 8001f60:	2000265c 	.word	0x2000265c
 8001f64:	20001650 	.word	0x20001650
 8001f68:	200015f0 	.word	0x200015f0

08001f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return 1;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_kill>:

int _kill(int pid, int sig)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f86:	f003 fa19 	bl	80053bc <__errno>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2216      	movs	r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_exit>:

void _exit (int status)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffe7 	bl	8001f7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fae:	bf00      	nop
 8001fb0:	e7fd      	b.n	8001fae <_exit+0x12>

08001fb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e00a      	b.n	8001fda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	4601      	mov	r1, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60ba      	str	r2, [r7, #8]
 8001fd0:	b2ca      	uxtb	r2, r1
 8001fd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbf0      	blt.n	8001fc4 <_read+0x12>
  }

  return len;
 8001fe2:	687b      	ldr	r3, [r7, #4]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e009      	b.n	8002012 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	60ba      	str	r2, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	dbf1      	blt.n	8001ffe <_write+0x12>
  }
  return len;
 800201a:	687b      	ldr	r3, [r7, #4]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_close>:

int _close(int file)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204c:	605a      	str	r2, [r3, #4]
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_isatty>:

int _isatty(int file)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f003 f97e 	bl	80053bc <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20020000 	.word	0x20020000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	2000266c 	.word	0x2000266c
 80020f4:	200027c0 	.word	0x200027c0

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002120:	480d      	ldr	r0, [pc, #52]	@ (8002158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002122:	490e      	ldr	r1, [pc, #56]	@ (800215c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002124:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002138:	4c0b      	ldr	r4, [pc, #44]	@ (8002168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002146:	f7ff ffd7 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f003 f93d 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7ff f88d 	bl	800126c <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002160:	08006570 	.word	0x08006570
  ldr r2, =_sbss
 8002164:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002168:	200027c0 	.word	0x200027c0

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	@ (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 ffc1 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fcea 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffd9 	bl	800318a <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 ffa1 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000004c 	.word	0x2000004c
 800220c:	20000054 	.word	0x20000054
 8002210:	20000050 	.word	0x20000050

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000054 	.word	0x20000054
 8002238:	20002670 	.word	0x20002670

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20002670 	.word	0x20002670

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000054 	.word	0x20000054

0800229c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0ed      	b.n	800248a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fc86 	bl	8001bcc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff ffb4 	bl	800223c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d6:	e012      	b.n	80022fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d8:	f7ff ffb0 	bl	800223c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d90b      	bls.n	80022fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2205      	movs	r2, #5
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0c5      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0e5      	beq.n	80022d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0202 	bic.w	r2, r2, #2
 800231a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7ff ff8e 	bl	800223c <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002322:	e012      	b.n	800234a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002324:	f7ff ff8a 	bl	800223c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b0a      	cmp	r3, #10
 8002330:	d90b      	bls.n	800234a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e09f      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e5      	bne.n	8002324 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e007      	b.n	8002382 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e5b      	ldrb	r3, [r3, #25]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e007      	b.n	80023ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e9b      	ldrb	r3, [r3, #26]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0220 	bic.w	r2, r2, #32
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7edb      	ldrb	r3, [r3, #27]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7f1b      	ldrb	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7f5b      	ldrb	r3, [r3, #29]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0204 	orr.w	r2, r2, #4
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d003      	beq.n	80024ba <HAL_CAN_ConfigFilter+0x26>
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f040 80be 	bne.w	8002636 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024ba:	4b65      	ldr	r3, [pc, #404]	@ (8002650 <HAL_CAN_ConfigFilter+0x1bc>)
 80024bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024d4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	431a      	orrs	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	401a      	ands	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d123      	bne.n	8002564 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800253e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3248      	adds	r2, #72	@ 0x48
 8002544:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002558:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800255a:	6979      	ldr	r1, [r7, #20]
 800255c:	3348      	adds	r3, #72	@ 0x48
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d122      	bne.n	80025b2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800258c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3248      	adds	r2, #72	@ 0x48
 8002592:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	3348      	adds	r3, #72	@ 0x48
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80025cc:	e007      	b.n	80025de <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80025f8:	e007      	b.n	800260a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002628:	f023 0201 	bic.w	r2, r3, #1
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e006      	b.n	8002644 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40006400 	.word	0x40006400

08002654 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d12e      	bne.n	80026c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002680:	f7ff fddc 	bl	800223c <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002686:	e012      	b.n	80026ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002688:	f7ff fdd8 	bl	800223c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b0a      	cmp	r3, #10
 8002694:	d90b      	bls.n	80026ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e012      	b.n	80026d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e006      	b.n	80026d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	@ 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d003      	beq.n	8002708 <HAL_CAN_AddTxMessage+0x2c>
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	2b02      	cmp	r3, #2
 8002704:	f040 80ad 	bne.w	8002862 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8095 	beq.w	8002852 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002732:	2201      	movs	r2, #1
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800274e:	68f9      	ldr	r1, [r7, #12]
 8002750:	6809      	ldr	r1, [r1, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3318      	adds	r3, #24
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e00f      	b.n	8002780 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800276a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002774:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3318      	adds	r3, #24
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	440b      	add	r3, r1
 800277e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3318      	adds	r3, #24
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	440b      	add	r3, r1
 8002790:	3304      	adds	r3, #4
 8002792:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	7d1b      	ldrb	r3, [r3, #20]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d111      	bne.n	80027c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3318      	adds	r3, #24
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	6811      	ldr	r1, [r2, #0]
 80027b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3318      	adds	r3, #24
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	3304      	adds	r3, #4
 80027be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3307      	adds	r3, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	061a      	lsls	r2, r3, #24
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3306      	adds	r3, #6
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3305      	adds	r3, #5
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	4313      	orrs	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	3204      	adds	r2, #4
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	4610      	mov	r0, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6811      	ldr	r1, [r2, #0]
 80027e8:	ea43 0200 	orr.w	r2, r3, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80027f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3303      	adds	r3, #3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	061a      	lsls	r2, r3, #24
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3302      	adds	r3, #2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3301      	adds	r3, #1
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	4313      	orrs	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	4610      	mov	r0, r2
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	6811      	ldr	r1, [r2, #0]
 800281e:	ea43 0200 	orr.w	r2, r3, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	440b      	add	r3, r1
 8002828:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800282c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3318      	adds	r3, #24
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4413      	add	r3, r2
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	6811      	ldr	r1, [r2, #0]
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3318      	adds	r3, #24
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	440b      	add	r3, r1
 800284c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e00e      	b.n	8002870 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e006      	b.n	8002870 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3724      	adds	r7, #36	@ 0x24
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d003      	beq.n	80028a0 <HAL_CAN_GetRxMessage+0x24>
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 8103 	bne.w	8002aa6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0f7      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0e8      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	331b      	adds	r3, #27
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0204 	and.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	331b      	adds	r3, #27
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0d5b      	lsrs	r3, r3, #21
 8002910:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e00b      	b.n	8002932 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	331b      	adds	r3, #27
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	331b      	adds	r3, #27
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0202 	and.w	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	331b      	adds	r3, #27
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2208      	movs	r2, #8
 8002964:	611a      	str	r2, [r3, #16]
 8002966:	e00b      	b.n	8002980 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	331b      	adds	r3, #27
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	331b      	adds	r3, #27
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	b2da      	uxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	331b      	adds	r3, #27
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	3304      	adds	r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0a1a      	lsrs	r2, r3, #8
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0c1a      	lsrs	r2, r3, #16
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	3302      	adds	r3, #2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e1a      	lsrs	r2, r3, #24
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	3304      	adds	r3, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0a1a      	lsrs	r2, r3, #8
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3305      	adds	r3, #5
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0c1a      	lsrs	r2, r3, #16
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3306      	adds	r3, #6
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e1a      	lsrs	r2, r3, #24
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3307      	adds	r3, #7
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0220 	orr.w	r2, r2, #32
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	e007      	b.n	8002aa2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e006      	b.n	8002ab4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d002      	beq.n	8002ade <HAL_CAN_ActivateNotification+0x1e>
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d109      	bne.n	8002af2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6959      	ldr	r1, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e006      	b.n	8002b00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	@ 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07c      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f983 	bl	8002e7a <HAL_CAN_TxMailbox0CompleteCallback>
 8002b74:	e016      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b88:	e00c      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9c:	e002      	b.n	8002ba4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f989 	bl	8002eb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d024      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f963 	bl	8002e8e <HAL_CAN_TxMailbox1CompleteCallback>
 8002bc8:	e016      	b.n	8002bf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	e00c      	b.n	8002bf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf0:	e002      	b.n	8002bf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f969 	bl	8002eca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d024      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f943 	bl	8002ea2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c1c:	e016      	b.n	8002c4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	e00c      	b.n	8002c4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c44:	e002      	b.n	8002c4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f949 	bl	8002ede <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f93a 	bl	8002f06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f921 	bl	8002ef2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2208      	movs	r2, #8
 8002cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f91c 	bl	8002f2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f903 	bl	8002f1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f906 	bl	8002f42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8ff 	bl	8002f56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d07b      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d072      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d043      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03e      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dda:	2b60      	cmp	r3, #96	@ 0x60
 8002ddc:	d02b      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x32a>
 8002dde:	2b60      	cmp	r3, #96	@ 0x60
 8002de0:	d82e      	bhi.n	8002e40 <HAL_CAN_IRQHandler+0x334>
 8002de2:	2b50      	cmp	r3, #80	@ 0x50
 8002de4:	d022      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x320>
 8002de6:	2b50      	cmp	r3, #80	@ 0x50
 8002de8:	d82a      	bhi.n	8002e40 <HAL_CAN_IRQHandler+0x334>
 8002dea:	2b40      	cmp	r3, #64	@ 0x40
 8002dec:	d019      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x316>
 8002dee:	2b40      	cmp	r3, #64	@ 0x40
 8002df0:	d826      	bhi.n	8002e40 <HAL_CAN_IRQHandler+0x334>
 8002df2:	2b30      	cmp	r3, #48	@ 0x30
 8002df4:	d010      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x30c>
 8002df6:	2b30      	cmp	r3, #48	@ 0x30
 8002df8:	d822      	bhi.n	8002e40 <HAL_CAN_IRQHandler+0x334>
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d002      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x2f8>
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d005      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e02:	e01d      	b.n	8002e40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e0c:	e019      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e16:	e014      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e20:	e00f      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e2a:	e00a      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e34:	e005      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e3e:	e000      	b.n	8002e42 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2204      	movs	r2, #4
 8002e58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f87c 	bl	8002f6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	@ (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	@ (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	@ (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff8e 	bl	8003020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	@ (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff29 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff3e 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff8e 	bl	8003074 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5d 	bl	8003020 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff31 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff f844 	bl	800223c <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d008      	beq.n	80031d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2280      	movs	r2, #128	@ 0x80
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e052      	b.n	800327a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0216 	bic.w	r2, r2, #22
 80031e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <HAL_DMA_Abort+0x62>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0208 	bic.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003224:	e013      	b.n	800324e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003226:	f7ff f809 	bl	800223c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b05      	cmp	r3, #5
 8003232:	d90c      	bls.n	800324e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e015      	b.n	800327a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e4      	bne.n	8003226 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	223f      	movs	r2, #63	@ 0x3f
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d004      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e00c      	b.n	80032ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e16b      	b.n	80035bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	f040 815a 	bne.w	80035b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d005      	beq.n	800331a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003316:	2b02      	cmp	r3, #2
 8003318:	d130      	bne.n	800337c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 0201 	and.w	r2, r3, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b03      	cmp	r3, #3
 8003386:	d017      	beq.n	80033b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d123      	bne.n	800340c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80b4 	beq.w	80035b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <HAL_GPIO_Init+0x30c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003456:	4a5f      	ldr	r2, [pc, #380]	@ (80035d4 <HAL_GPIO_Init+0x30c>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800345c:	6453      	str	r3, [r2, #68]	@ 0x44
 800345e:	4b5d      	ldr	r3, [pc, #372]	@ (80035d4 <HAL_GPIO_Init+0x30c>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346a:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <HAL_GPIO_Init+0x310>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a52      	ldr	r2, [pc, #328]	@ (80035dc <HAL_GPIO_Init+0x314>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02b      	beq.n	80034ee <HAL_GPIO_Init+0x226>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a51      	ldr	r2, [pc, #324]	@ (80035e0 <HAL_GPIO_Init+0x318>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d025      	beq.n	80034ea <HAL_GPIO_Init+0x222>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a50      	ldr	r2, [pc, #320]	@ (80035e4 <HAL_GPIO_Init+0x31c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01f      	beq.n	80034e6 <HAL_GPIO_Init+0x21e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	@ (80035e8 <HAL_GPIO_Init+0x320>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d019      	beq.n	80034e2 <HAL_GPIO_Init+0x21a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	@ (80035ec <HAL_GPIO_Init+0x324>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_GPIO_Init+0x216>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	@ (80035f0 <HAL_GPIO_Init+0x328>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00d      	beq.n	80034da <HAL_GPIO_Init+0x212>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	@ (80035f4 <HAL_GPIO_Init+0x32c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <HAL_GPIO_Init+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	@ (80035f8 <HAL_GPIO_Init+0x330>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_GPIO_Init+0x20a>
 80034ce:	2307      	movs	r3, #7
 80034d0:	e00e      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034d2:	2308      	movs	r3, #8
 80034d4:	e00c      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034d6:	2306      	movs	r3, #6
 80034d8:	e00a      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034da:	2305      	movs	r3, #5
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034de:	2304      	movs	r3, #4
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x228>
 80034ee:	2300      	movs	r3, #0
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003500:	4935      	ldr	r1, [pc, #212]	@ (80035d8 <HAL_GPIO_Init+0x310>)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350e:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <HAL_GPIO_Init+0x334>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003532:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <HAL_GPIO_Init+0x334>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003538:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <HAL_GPIO_Init+0x334>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800355c:	4a27      	ldr	r2, [pc, #156]	@ (80035fc <HAL_GPIO_Init+0x334>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003562:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <HAL_GPIO_Init+0x334>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_GPIO_Init+0x334>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358c:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <HAL_GPIO_Init+0x334>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b0:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <HAL_GPIO_Init+0x334>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	f67f ae90 	bls.w	80032e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3724      	adds	r7, #36	@ 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40021400 	.word	0x40021400
 80035f4:	40021800 	.word	0x40021800
 80035f8:	40021c00 	.word	0x40021c00
 80035fc:	40013c00 	.word	0x40013c00

08003600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
 800360c:	4613      	mov	r3, r2
 800360e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003610:	787b      	ldrb	r3, [r7, #1]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800361c:	e003      	b.n	8003626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	041a      	lsls	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	619a      	str	r2, [r3, #24]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364a:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f806 	bl	8003664 <HAL_GPIO_EXTI_Callback>
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40013c00 	.word	0x40013c00

08003664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e267      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	4b88      	ldr	r3, [pc, #544]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b82      	ldr	r3, [pc, #520]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e242      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b70      	ldr	r3, [pc, #448]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6c      	ldr	r2, [pc, #432]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fd82 	bl	800223c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe fd7e 	bl	800223c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	@ 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e207      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fd6e 	bl	800223c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fd6a 	bl	800223c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1f3      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe fd23 	bl	800223c <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe fd1f 	bl	800223c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1a8      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fd02 	bl	800223c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe fcfe 	bl	800223c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e187      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fce2 	bl	800223c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe fcde 	bl	800223c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e167      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e01b      	b.n	80038d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe fccb 	bl	800223c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00e      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe fcc7 	bl	800223c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d907      	bls.n	80038c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e150      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ea      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b81      	ldr	r3, [pc, #516]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b7d      	ldr	r3, [pc, #500]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	@ 0x40
 8003902:	4b7a      	ldr	r3, [pc, #488]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe fc87 	bl	800223c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe fc83 	bl	800223c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e10c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x2ea>
 8003958:	4b64      	ldr	r3, [pc, #400]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5e      	ldr	r2, [pc, #376]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	4b5c      	ldr	r3, [pc, #368]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003988:	4b58      	ldr	r3, [pc, #352]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a57      	ldr	r2, [pc, #348]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
 8003994:	4b55      	ldr	r3, [pc, #340]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fe fc48 	bl	800223c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe fc44 	bl	800223c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0cb      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCC_OscConfig+0x334>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fe fc32 	bl	800223c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe fc2e 	bl	800223c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ee      	bne.n	80039dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	4a38      	ldr	r2, [pc, #224]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1a:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d05c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d141      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fc02 	bl	800223c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fbfe 	bl	800223c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e087      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	491b      	ldr	r1, [pc, #108]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fbd7 	bl	800223c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe fbd3 	bl	800223c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e05c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003ab0:	e054      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fbc0 	bl	800223c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fbbc 	bl	800223c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e038      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d111      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cc      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d90c      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e067      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4934      	ldr	r1, [pc, #208]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe faee 	bl	800223c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fe faea 	bl	800223c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e04f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d20c      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fa4e 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	08006468 	.word	0x08006468
 8003d30:	2000004c 	.word	0x2000004c
 8003d34:	20000050 	.word	0x20000050

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b094      	sub	sp, #80	@ 0x50
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b79      	ldr	r3, [pc, #484]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80e1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e0db      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b73      	ldr	r3, [pc, #460]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d70:	e0db      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d72:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d063      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	6139      	str	r1, [r7, #16]
 8003dc8:	4629      	mov	r1, r5
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	018b      	lsls	r3, r1, #6
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de6:	4651      	mov	r1, sl
 8003de8:	018a      	lsls	r2, r1, #6
 8003dea:	4651      	mov	r1, sl
 8003dec:	ebb2 0801 	subs.w	r8, r2, r1
 8003df0:	4659      	mov	r1, fp
 8003df2:	eb63 0901 	sbc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	462b      	mov	r3, r5
 8003e18:	eb49 0303 	adc.w	r3, r9, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	024b      	lsls	r3, r1, #9
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e34:	4621      	mov	r1, r4
 8003e36:	024a      	lsls	r2, r1, #9
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e48:	f7fc fa12 	bl	8000270 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4611      	mov	r1, r2
 8003e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0159      	lsls	r1, r3, #5
 8003e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e82:	0150      	lsls	r0, r2, #5
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4641      	mov	r1, r8
 8003e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8003eac:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	464b      	mov	r3, r9
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	61fa      	str	r2, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	f7fc f9b8 	bl	8000270 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3750      	adds	r7, #80	@ 0x50
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	2000004c 	.word	0x2000004c

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08006478 	.word	0x08006478

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08006478 	.word	0x08006478

08003fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e042      	b.n	8004044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd feaa 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	@ 0x24
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fdbd 	bl	8004b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	d175      	bne.n	8004158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_Transmit+0x2c>
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06e      	b.n	800415a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2221      	movs	r2, #33	@ 0x21
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408a:	f7fe f8d7 	bl	800223c <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c0:	e02e      	b.n	8004120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fb1f 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e03a      	b.n	800415a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3302      	adds	r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e007      	b.n	8004112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1cb      	bne.n	80040c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2140      	movs	r1, #64	@ 0x40
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 faeb 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e006      	b.n	800415a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	4613      	mov	r3, r2
 800416e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b20      	cmp	r3, #32
 800417a:	d112      	bne.n	80041a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_UART_Receive_IT+0x26>
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e00b      	b.n	80041a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	461a      	mov	r2, r3
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fb12 	bl	80047c2 <UART_Start_Receive_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	e000      	b.n	80041a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b0ba      	sub	sp, #232	@ 0xe8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_UART_IRQHandler+0x66>
 80041fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fbf2 	bl	80049f4 <UART_Receive_IT>
      return;
 8004210:	e25b      	b.n	80046ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80de 	beq.w	80043d8 <HAL_UART_IRQHandler+0x22c>
 800421c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80d1 	beq.w	80043d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_UART_IRQHandler+0xae>
 8004242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_UART_IRQHandler+0xd2>
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_UART_IRQHandler+0xf6>
 800428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <HAL_UART_IRQHandler+0x126>
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f043 0208 	orr.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 81f2 	beq.w	80046c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_UART_IRQHandler+0x14e>
 80042e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb7d 	bl	80049f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_UART_IRQHandler+0x17a>
 800431e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d04f      	beq.n	80043c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa85 	bl	8004836 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d141      	bne.n	80043be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3314      	adds	r3, #20
 8004362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004366:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800436a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800437e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1d9      	bne.n	800433a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d013      	beq.n	80043b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	4a7e      	ldr	r2, [pc, #504]	@ (800458c <HAL_UART_IRQHandler+0x3e0>)
 8004394:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe ff71 	bl	8003282 <HAL_DMA_Abort_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043b0:	4610      	mov	r0, r2
 80043b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	e00e      	b.n	80043d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f994 	bl	80046e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	e00a      	b.n	80043d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f990 	bl	80046e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	e006      	b.n	80043d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f98c 	bl	80046e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043d2:	e175      	b.n	80046c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	bf00      	nop
    return;
 80043d6:	e173      	b.n	80046c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 814f 	bne.w	8004680 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8148 	beq.w	8004680 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8141 	beq.w	8004680 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	f040 80b6 	bne.w	8004590 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8145 	beq.w	80046c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800443e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004442:	429a      	cmp	r2, r3
 8004444:	f080 813e 	bcs.w	80046c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800444e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800445a:	f000 8088 	beq.w	800456e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800448a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800448e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004496:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1d9      	bne.n	800445e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e1      	bne.n	80044aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800450a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800450c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e3      	bne.n	80044e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800453c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453e:	f023 0310 	bic.w	r3, r3, #16
 8004542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004550:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004552:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800455e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e3      	bne.n	800452c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fe1a 	bl	80031a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800457c:	b29b      	uxth	r3, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	b29b      	uxth	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8b7 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800458a:	e09b      	b.n	80046c4 <HAL_UART_IRQHandler+0x518>
 800458c:	080048fd 	.word	0x080048fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004598:	b29b      	uxth	r3, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 808e 	beq.w	80046c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8089 	beq.w	80046c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045da:	647a      	str	r2, [r7, #68]	@ 0x44
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e3      	bne.n	80045b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	623b      	str	r3, [r7, #32]
   return(result);
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004612:	633a      	str	r2, [r7, #48]	@ 0x30
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e3      	bne.n	80045ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	60fb      	str	r3, [r7, #12]
   return(result);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004658:	61fa      	str	r2, [r7, #28]
 800465a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	69b9      	ldr	r1, [r7, #24]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	617b      	str	r3, [r7, #20]
   return(result);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e3      	bne.n	8004634 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f83d 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800467e:	e023      	b.n	80046c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x4f4>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f943 	bl	8004924 <UART_Transmit_IT>
    return;
 800469e:	e014      	b.n	80046ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <HAL_UART_IRQHandler+0x51e>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f983 	bl	80049c4 <UART_EndTransmit_IT>
    return;
 80046be:	e004      	b.n	80046ca <HAL_UART_IRQHandler+0x51e>
    return;
 80046c0:	bf00      	nop
 80046c2:	e002      	b.n	80046ca <HAL_UART_IRQHandler+0x51e>
      return;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <HAL_UART_IRQHandler+0x51e>
      return;
 80046c8:	bf00      	nop
  }
}
 80046ca:	37e8      	adds	r7, #232	@ 0xe8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e03b      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d037      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fd fd87 	bl	800223c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e03a      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d023      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d020      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d01d      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d116      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f857 	bl	8004836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2208      	movs	r2, #8
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e00f      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d0b4      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2222      	movs	r2, #34	@ 0x22
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004806:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0220 	orr.w	r2, r2, #32
 8004826:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004836:	b480      	push	{r7}
 8004838:	b095      	sub	sp, #84	@ 0x54
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800485e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e5      	bne.n	800483e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	61fb      	str	r3, [r7, #28]
   return(result);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d119      	bne.n	80048e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0310 	bic.w	r3, r3, #16
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ce:	61ba      	str	r2, [r7, #24]
 80048d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048f0:	bf00      	nop
 80048f2:	3754      	adds	r7, #84	@ 0x54
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fee4 	bl	80046e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b21      	cmp	r3, #33	@ 0x21
 8004936:	d13e      	bne.n	80049b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d114      	bne.n	800496c <UART_Transmit_IT+0x48>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]
 800496a:	e008      	b.n	800497e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	1c59      	adds	r1, r3, #1
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6211      	str	r1, [r2, #32]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fe73 	bl	80046d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b22      	cmp	r3, #34	@ 0x22
 8004a06:	f040 80ae 	bne.w	8004b66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d117      	bne.n	8004a44 <UART_Receive_IT+0x50>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d113      	bne.n	8004a44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a42:	e026      	b.n	8004a92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a56:	d007      	beq.n	8004a68 <UART_Receive_IT+0x74>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <UART_Receive_IT+0x82>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e008      	b.n	8004a88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d15d      	bne.n	8004b62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0220 	bic.w	r2, r2, #32
 8004ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d135      	bne.n	8004b58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b12:	623a      	str	r2, [r7, #32]
 8004b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	69f9      	ldr	r1, [r7, #28]
 8004b18:	6a3a      	ldr	r2, [r7, #32]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d10a      	bne.n	8004b4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fdd1 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
 8004b56:	e002      	b.n	8004b5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc ffd7 	bl	8001b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e002      	b.n	8004b68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3730      	adds	r7, #48	@ 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b0c0      	sub	sp, #256	@ 0x100
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	68d9      	ldr	r1, [r3, #12]
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	ea40 0301 	orr.w	r3, r0, r1
 8004b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bc8:	f021 010c 	bic.w	r1, r1, #12
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	ea40 0301 	orr.w	r3, r0, r1
 8004bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d005      	beq.n	8004c10 <UART_SetConfig+0xa0>
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e40 <UART_SetConfig+0x2d0>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d104      	bne.n	8004c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7ff f9b8 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8004c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c18:	e003      	b.n	8004c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1a:	f7ff f99f 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8004c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c2c:	f040 810c 	bne.w	8004e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c52:	4621      	mov	r1, r4
 8004c54:	eb12 0801 	adds.w	r8, r2, r1
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb43 0901 	adc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c80:	462b      	mov	r3, r5
 8004c82:	eb49 0303 	adc.w	r3, r9, r3
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	18db      	adds	r3, r3, r3
 8004ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb4:	f7fb fadc 	bl	8000270 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ce8:	4641      	mov	r1, r8
 8004cea:	eb12 0a01 	adds.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d08:	4692      	mov	sl, r2
 8004d0a:	469b      	mov	fp, r3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb4b 0303 	adc.w	r3, fp, r3
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d34:	460b      	mov	r3, r1
 8004d36:	18db      	adds	r3, r3, r3
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d4a:	f7fb fa91 	bl	8000270 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	@ 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d78:	441c      	add	r4, r3
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d94:	415b      	adcs	r3, r3
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e06:	f7fb fa33 	bl	8000270 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	@ 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	3332      	adds	r3, #50	@ 0x32
 8004e22:	4a08      	ldr	r2, [pc, #32]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4422      	add	r2, r4
 8004e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e38:	e106      	b.n	8005048 <UART_SetConfig+0x4d8>
 8004e3a:	bf00      	nop
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40011400 	.word	0x40011400
 8004e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6239      	str	r1, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1854      	adds	r4, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb43 0501 	adc.w	r5, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e90:	464b      	mov	r3, r9
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	008a      	lsls	r2, r1, #2
 8004ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ec8:	f7fb f9d2 	bl	8000270 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b60      	ldr	r3, [pc, #384]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	011c      	lsls	r4, r3, #4
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	61b9      	str	r1, [r7, #24]
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6139      	str	r1, [r7, #16]
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f54:	4649      	mov	r1, r9
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5e:	4641      	mov	r1, r8
 8004f60:	008a      	lsls	r2, r1, #2
 8004f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f66:	f7fb f983 	bl	8000270 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2301 	umull	r2, r3, r3, r1
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2264      	movs	r2, #100	@ 0x64
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	@ 0x32
 8004f84:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	eb42 0303 	adc.w	r3, r2, r3
 8004fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005016:	f7fb f92b 	bl	8000270 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	@ 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	@ 0x32
 8005032:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4422      	add	r2, r4
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005054:	51eb851f 	.word	0x51eb851f

08005058 <rand>:
 8005058:	4b16      	ldr	r3, [pc, #88]	@ (80050b4 <rand+0x5c>)
 800505a:	b510      	push	{r4, lr}
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005060:	b9b3      	cbnz	r3, 8005090 <rand+0x38>
 8005062:	2018      	movs	r0, #24
 8005064:	f000 fa40 	bl	80054e8 <malloc>
 8005068:	4602      	mov	r2, r0
 800506a:	6320      	str	r0, [r4, #48]	@ 0x30
 800506c:	b920      	cbnz	r0, 8005078 <rand+0x20>
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <rand+0x60>)
 8005070:	4812      	ldr	r0, [pc, #72]	@ (80050bc <rand+0x64>)
 8005072:	2152      	movs	r1, #82	@ 0x52
 8005074:	f000 f9d0 	bl	8005418 <__assert_func>
 8005078:	4911      	ldr	r1, [pc, #68]	@ (80050c0 <rand+0x68>)
 800507a:	4b12      	ldr	r3, [pc, #72]	@ (80050c4 <rand+0x6c>)
 800507c:	e9c0 1300 	strd	r1, r3, [r0]
 8005080:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <rand+0x70>)
 8005082:	6083      	str	r3, [r0, #8]
 8005084:	230b      	movs	r3, #11
 8005086:	8183      	strh	r3, [r0, #12]
 8005088:	2100      	movs	r1, #0
 800508a:	2001      	movs	r0, #1
 800508c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005090:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005092:	480e      	ldr	r0, [pc, #56]	@ (80050cc <rand+0x74>)
 8005094:	690b      	ldr	r3, [r1, #16]
 8005096:	694c      	ldr	r4, [r1, #20]
 8005098:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <rand+0x78>)
 800509a:	4358      	muls	r0, r3
 800509c:	fb02 0004 	mla	r0, r2, r4, r0
 80050a0:	fba3 3202 	umull	r3, r2, r3, r2
 80050a4:	3301      	adds	r3, #1
 80050a6:	eb40 0002 	adc.w	r0, r0, r2
 80050aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80050ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	20000064 	.word	0x20000064
 80050b8:	08006480 	.word	0x08006480
 80050bc:	08006497 	.word	0x08006497
 80050c0:	abcd330e 	.word	0xabcd330e
 80050c4:	e66d1234 	.word	0xe66d1234
 80050c8:	0005deec 	.word	0x0005deec
 80050cc:	5851f42d 	.word	0x5851f42d
 80050d0:	4c957f2d 	.word	0x4c957f2d

080050d4 <std>:
 80050d4:	2300      	movs	r3, #0
 80050d6:	b510      	push	{r4, lr}
 80050d8:	4604      	mov	r4, r0
 80050da:	e9c0 3300 	strd	r3, r3, [r0]
 80050de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050e2:	6083      	str	r3, [r0, #8]
 80050e4:	8181      	strh	r1, [r0, #12]
 80050e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80050e8:	81c2      	strh	r2, [r0, #14]
 80050ea:	6183      	str	r3, [r0, #24]
 80050ec:	4619      	mov	r1, r3
 80050ee:	2208      	movs	r2, #8
 80050f0:	305c      	adds	r0, #92	@ 0x5c
 80050f2:	f000 f914 	bl	800531e <memset>
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <std+0x58>)
 80050f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <std+0x5c>)
 80050fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <std+0x60>)
 8005100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <std+0x64>)
 8005104:	6323      	str	r3, [r4, #48]	@ 0x30
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <std+0x68>)
 8005108:	6224      	str	r4, [r4, #32]
 800510a:	429c      	cmp	r4, r3
 800510c:	d006      	beq.n	800511c <std+0x48>
 800510e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005112:	4294      	cmp	r4, r2
 8005114:	d002      	beq.n	800511c <std+0x48>
 8005116:	33d0      	adds	r3, #208	@ 0xd0
 8005118:	429c      	cmp	r4, r3
 800511a:	d105      	bne.n	8005128 <std+0x54>
 800511c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	f000 b974 	b.w	8005410 <__retarget_lock_init_recursive>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	08005299 	.word	0x08005299
 8005130:	080052bb 	.word	0x080052bb
 8005134:	080052f3 	.word	0x080052f3
 8005138:	08005317 	.word	0x08005317
 800513c:	20002674 	.word	0x20002674

08005140 <stdio_exit_handler>:
 8005140:	4a02      	ldr	r2, [pc, #8]	@ (800514c <stdio_exit_handler+0xc>)
 8005142:	4903      	ldr	r1, [pc, #12]	@ (8005150 <stdio_exit_handler+0x10>)
 8005144:	4803      	ldr	r0, [pc, #12]	@ (8005154 <stdio_exit_handler+0x14>)
 8005146:	f000 b869 	b.w	800521c <_fwalk_sglue>
 800514a:	bf00      	nop
 800514c:	20000058 	.word	0x20000058
 8005150:	08005d29 	.word	0x08005d29
 8005154:	20000068 	.word	0x20000068

08005158 <cleanup_stdio>:
 8005158:	6841      	ldr	r1, [r0, #4]
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <cleanup_stdio+0x34>)
 800515c:	4299      	cmp	r1, r3
 800515e:	b510      	push	{r4, lr}
 8005160:	4604      	mov	r4, r0
 8005162:	d001      	beq.n	8005168 <cleanup_stdio+0x10>
 8005164:	f000 fde0 	bl	8005d28 <_fflush_r>
 8005168:	68a1      	ldr	r1, [r4, #8]
 800516a:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <cleanup_stdio+0x38>)
 800516c:	4299      	cmp	r1, r3
 800516e:	d002      	beq.n	8005176 <cleanup_stdio+0x1e>
 8005170:	4620      	mov	r0, r4
 8005172:	f000 fdd9 	bl	8005d28 <_fflush_r>
 8005176:	68e1      	ldr	r1, [r4, #12]
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <cleanup_stdio+0x3c>)
 800517a:	4299      	cmp	r1, r3
 800517c:	d004      	beq.n	8005188 <cleanup_stdio+0x30>
 800517e:	4620      	mov	r0, r4
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	f000 bdd0 	b.w	8005d28 <_fflush_r>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	bf00      	nop
 800518c:	20002674 	.word	0x20002674
 8005190:	200026dc 	.word	0x200026dc
 8005194:	20002744 	.word	0x20002744

08005198 <global_stdio_init.part.0>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <global_stdio_init.part.0+0x30>)
 800519c:	4c0b      	ldr	r4, [pc, #44]	@ (80051cc <global_stdio_init.part.0+0x34>)
 800519e:	4a0c      	ldr	r2, [pc, #48]	@ (80051d0 <global_stdio_init.part.0+0x38>)
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	4620      	mov	r0, r4
 80051a4:	2200      	movs	r2, #0
 80051a6:	2104      	movs	r1, #4
 80051a8:	f7ff ff94 	bl	80050d4 <std>
 80051ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051b0:	2201      	movs	r2, #1
 80051b2:	2109      	movs	r1, #9
 80051b4:	f7ff ff8e 	bl	80050d4 <std>
 80051b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051bc:	2202      	movs	r2, #2
 80051be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c2:	2112      	movs	r1, #18
 80051c4:	f7ff bf86 	b.w	80050d4 <std>
 80051c8:	200027ac 	.word	0x200027ac
 80051cc:	20002674 	.word	0x20002674
 80051d0:	08005141 	.word	0x08005141

080051d4 <__sfp_lock_acquire>:
 80051d4:	4801      	ldr	r0, [pc, #4]	@ (80051dc <__sfp_lock_acquire+0x8>)
 80051d6:	f000 b91c 	b.w	8005412 <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	200027b5 	.word	0x200027b5

080051e0 <__sfp_lock_release>:
 80051e0:	4801      	ldr	r0, [pc, #4]	@ (80051e8 <__sfp_lock_release+0x8>)
 80051e2:	f000 b917 	b.w	8005414 <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	200027b5 	.word	0x200027b5

080051ec <__sinit>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4604      	mov	r4, r0
 80051f0:	f7ff fff0 	bl	80051d4 <__sfp_lock_acquire>
 80051f4:	6a23      	ldr	r3, [r4, #32]
 80051f6:	b11b      	cbz	r3, 8005200 <__sinit+0x14>
 80051f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051fc:	f7ff bff0 	b.w	80051e0 <__sfp_lock_release>
 8005200:	4b04      	ldr	r3, [pc, #16]	@ (8005214 <__sinit+0x28>)
 8005202:	6223      	str	r3, [r4, #32]
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <__sinit+0x2c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f5      	bne.n	80051f8 <__sinit+0xc>
 800520c:	f7ff ffc4 	bl	8005198 <global_stdio_init.part.0>
 8005210:	e7f2      	b.n	80051f8 <__sinit+0xc>
 8005212:	bf00      	nop
 8005214:	08005159 	.word	0x08005159
 8005218:	200027ac 	.word	0x200027ac

0800521c <_fwalk_sglue>:
 800521c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005220:	4607      	mov	r7, r0
 8005222:	4688      	mov	r8, r1
 8005224:	4614      	mov	r4, r2
 8005226:	2600      	movs	r6, #0
 8005228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800522c:	f1b9 0901 	subs.w	r9, r9, #1
 8005230:	d505      	bpl.n	800523e <_fwalk_sglue+0x22>
 8005232:	6824      	ldr	r4, [r4, #0]
 8005234:	2c00      	cmp	r4, #0
 8005236:	d1f7      	bne.n	8005228 <_fwalk_sglue+0xc>
 8005238:	4630      	mov	r0, r6
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d907      	bls.n	8005254 <_fwalk_sglue+0x38>
 8005244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005248:	3301      	adds	r3, #1
 800524a:	d003      	beq.n	8005254 <_fwalk_sglue+0x38>
 800524c:	4629      	mov	r1, r5
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	4306      	orrs	r6, r0
 8005254:	3568      	adds	r5, #104	@ 0x68
 8005256:	e7e9      	b.n	800522c <_fwalk_sglue+0x10>

08005258 <siprintf>:
 8005258:	b40e      	push	{r1, r2, r3}
 800525a:	b500      	push	{lr}
 800525c:	b09c      	sub	sp, #112	@ 0x70
 800525e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005260:	9002      	str	r0, [sp, #8]
 8005262:	9006      	str	r0, [sp, #24]
 8005264:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005268:	4809      	ldr	r0, [pc, #36]	@ (8005290 <siprintf+0x38>)
 800526a:	9107      	str	r1, [sp, #28]
 800526c:	9104      	str	r1, [sp, #16]
 800526e:	4909      	ldr	r1, [pc, #36]	@ (8005294 <siprintf+0x3c>)
 8005270:	f853 2b04 	ldr.w	r2, [r3], #4
 8005274:	9105      	str	r1, [sp, #20]
 8005276:	6800      	ldr	r0, [r0, #0]
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	a902      	add	r1, sp, #8
 800527c:	f000 fa46 	bl	800570c <_svfiprintf_r>
 8005280:	9b02      	ldr	r3, [sp, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	b01c      	add	sp, #112	@ 0x70
 8005288:	f85d eb04 	ldr.w	lr, [sp], #4
 800528c:	b003      	add	sp, #12
 800528e:	4770      	bx	lr
 8005290:	20000064 	.word	0x20000064
 8005294:	ffff0208 	.word	0xffff0208

08005298 <__sread>:
 8005298:	b510      	push	{r4, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	f000 f868 	bl	8005374 <_read_r>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	bfab      	itete	ge
 80052a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052aa:	89a3      	ldrhlt	r3, [r4, #12]
 80052ac:	181b      	addge	r3, r3, r0
 80052ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052b2:	bfac      	ite	ge
 80052b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052b6:	81a3      	strhlt	r3, [r4, #12]
 80052b8:	bd10      	pop	{r4, pc}

080052ba <__swrite>:
 80052ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052be:	461f      	mov	r7, r3
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	05db      	lsls	r3, r3, #23
 80052c4:	4605      	mov	r5, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	4616      	mov	r6, r2
 80052ca:	d505      	bpl.n	80052d8 <__swrite+0x1e>
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	2302      	movs	r3, #2
 80052d2:	2200      	movs	r2, #0
 80052d4:	f000 f83c 	bl	8005350 <_lseek_r>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	4632      	mov	r2, r6
 80052e6:	463b      	mov	r3, r7
 80052e8:	4628      	mov	r0, r5
 80052ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	f000 b853 	b.w	8005398 <_write_r>

080052f2 <__sseek>:
 80052f2:	b510      	push	{r4, lr}
 80052f4:	460c      	mov	r4, r1
 80052f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fa:	f000 f829 	bl	8005350 <_lseek_r>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	bf15      	itete	ne
 8005304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800530a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800530e:	81a3      	strheq	r3, [r4, #12]
 8005310:	bf18      	it	ne
 8005312:	81a3      	strhne	r3, [r4, #12]
 8005314:	bd10      	pop	{r4, pc}

08005316 <__sclose>:
 8005316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531a:	f000 b809 	b.w	8005330 <_close_r>

0800531e <memset>:
 800531e:	4402      	add	r2, r0
 8005320:	4603      	mov	r3, r0
 8005322:	4293      	cmp	r3, r2
 8005324:	d100      	bne.n	8005328 <memset+0xa>
 8005326:	4770      	bx	lr
 8005328:	f803 1b01 	strb.w	r1, [r3], #1
 800532c:	e7f9      	b.n	8005322 <memset+0x4>
	...

08005330 <_close_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	@ (800534c <_close_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fc fe72 	bl	8002024 <_close>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_close_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_close_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200027b0 	.word	0x200027b0

08005350 <_lseek_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4d07      	ldr	r5, [pc, #28]	@ (8005370 <_lseek_r+0x20>)
 8005354:	4604      	mov	r4, r0
 8005356:	4608      	mov	r0, r1
 8005358:	4611      	mov	r1, r2
 800535a:	2200      	movs	r2, #0
 800535c:	602a      	str	r2, [r5, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7fc fe87 	bl	8002072 <_lseek>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_lseek_r+0x1e>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_lseek_r+0x1e>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	200027b0 	.word	0x200027b0

08005374 <_read_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d07      	ldr	r5, [pc, #28]	@ (8005394 <_read_r+0x20>)
 8005378:	4604      	mov	r4, r0
 800537a:	4608      	mov	r0, r1
 800537c:	4611      	mov	r1, r2
 800537e:	2200      	movs	r2, #0
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f7fc fe15 	bl	8001fb2 <_read>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_read_r+0x1e>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_read_r+0x1e>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200027b0 	.word	0x200027b0

08005398 <_write_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d07      	ldr	r5, [pc, #28]	@ (80053b8 <_write_r+0x20>)
 800539c:	4604      	mov	r4, r0
 800539e:	4608      	mov	r0, r1
 80053a0:	4611      	mov	r1, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fc fe20 	bl	8001fec <_write>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_write_r+0x1e>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_write_r+0x1e>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	200027b0 	.word	0x200027b0

080053bc <__errno>:
 80053bc:	4b01      	ldr	r3, [pc, #4]	@ (80053c4 <__errno+0x8>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000064 	.word	0x20000064

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005400 <__libc_init_array+0x38>)
 80053cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005404 <__libc_init_array+0x3c>)
 80053ce:	1b64      	subs	r4, r4, r5
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	2600      	movs	r6, #0
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005408 <__libc_init_array+0x40>)
 80053da:	4c0c      	ldr	r4, [pc, #48]	@ (800540c <__libc_init_array+0x44>)
 80053dc:	f000 fff0 	bl	80063c0 <_init>
 80053e0:	1b64      	subs	r4, r4, r5
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	2600      	movs	r6, #0
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	08006568 	.word	0x08006568
 8005404:	08006568 	.word	0x08006568
 8005408:	08006568 	.word	0x08006568
 800540c:	0800656c 	.word	0x0800656c

08005410 <__retarget_lock_init_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_acquire_recursive>:
 8005412:	4770      	bx	lr

08005414 <__retarget_lock_release_recursive>:
 8005414:	4770      	bx	lr
	...

08005418 <__assert_func>:
 8005418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800541a:	4614      	mov	r4, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <__assert_func+0x2c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4605      	mov	r5, r0
 8005424:	68d8      	ldr	r0, [r3, #12]
 8005426:	b954      	cbnz	r4, 800543e <__assert_func+0x26>
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <__assert_func+0x30>)
 800542a:	461c      	mov	r4, r3
 800542c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005430:	9100      	str	r1, [sp, #0]
 8005432:	462b      	mov	r3, r5
 8005434:	4905      	ldr	r1, [pc, #20]	@ (800544c <__assert_func+0x34>)
 8005436:	f000 fc9f 	bl	8005d78 <fiprintf>
 800543a:	f000 fce7 	bl	8005e0c <abort>
 800543e:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <__assert_func+0x38>)
 8005440:	e7f4      	b.n	800542c <__assert_func+0x14>
 8005442:	bf00      	nop
 8005444:	20000064 	.word	0x20000064
 8005448:	0800652a 	.word	0x0800652a
 800544c:	080064fc 	.word	0x080064fc
 8005450:	080064ef 	.word	0x080064ef

08005454 <_free_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4605      	mov	r5, r0
 8005458:	2900      	cmp	r1, #0
 800545a:	d041      	beq.n	80054e0 <_free_r+0x8c>
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f0c      	subs	r4, r1, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfb8      	it	lt
 8005466:	18e4      	addlt	r4, r4, r3
 8005468:	f000 f8e8 	bl	800563c <__malloc_lock>
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <_free_r+0x90>)
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	b933      	cbnz	r3, 8005480 <_free_r+0x2c>
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	6014      	str	r4, [r2, #0]
 8005476:	4628      	mov	r0, r5
 8005478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547c:	f000 b8e4 	b.w	8005648 <__malloc_unlock>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d908      	bls.n	8005496 <_free_r+0x42>
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	1821      	adds	r1, r4, r0
 8005488:	428b      	cmp	r3, r1
 800548a:	bf01      	itttt	eq
 800548c:	6819      	ldreq	r1, [r3, #0]
 800548e:	685b      	ldreq	r3, [r3, #4]
 8005490:	1809      	addeq	r1, r1, r0
 8005492:	6021      	streq	r1, [r4, #0]
 8005494:	e7ed      	b.n	8005472 <_free_r+0x1e>
 8005496:	461a      	mov	r2, r3
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b10b      	cbz	r3, 80054a0 <_free_r+0x4c>
 800549c:	42a3      	cmp	r3, r4
 800549e:	d9fa      	bls.n	8005496 <_free_r+0x42>
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	1850      	adds	r0, r2, r1
 80054a4:	42a0      	cmp	r0, r4
 80054a6:	d10b      	bne.n	80054c0 <_free_r+0x6c>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	4401      	add	r1, r0
 80054ac:	1850      	adds	r0, r2, r1
 80054ae:	4283      	cmp	r3, r0
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	d1e0      	bne.n	8005476 <_free_r+0x22>
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	6053      	str	r3, [r2, #4]
 80054ba:	4408      	add	r0, r1
 80054bc:	6010      	str	r0, [r2, #0]
 80054be:	e7da      	b.n	8005476 <_free_r+0x22>
 80054c0:	d902      	bls.n	80054c8 <_free_r+0x74>
 80054c2:	230c      	movs	r3, #12
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	e7d6      	b.n	8005476 <_free_r+0x22>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	1821      	adds	r1, r4, r0
 80054cc:	428b      	cmp	r3, r1
 80054ce:	bf04      	itt	eq
 80054d0:	6819      	ldreq	r1, [r3, #0]
 80054d2:	685b      	ldreq	r3, [r3, #4]
 80054d4:	6063      	str	r3, [r4, #4]
 80054d6:	bf04      	itt	eq
 80054d8:	1809      	addeq	r1, r1, r0
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	6054      	str	r4, [r2, #4]
 80054de:	e7ca      	b.n	8005476 <_free_r+0x22>
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	bf00      	nop
 80054e4:	200027bc 	.word	0x200027bc

080054e8 <malloc>:
 80054e8:	4b02      	ldr	r3, [pc, #8]	@ (80054f4 <malloc+0xc>)
 80054ea:	4601      	mov	r1, r0
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f000 b825 	b.w	800553c <_malloc_r>
 80054f2:	bf00      	nop
 80054f4:	20000064 	.word	0x20000064

080054f8 <sbrk_aligned>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005538 <sbrk_aligned+0x40>)
 80054fc:	460c      	mov	r4, r1
 80054fe:	6831      	ldr	r1, [r6, #0]
 8005500:	4605      	mov	r5, r0
 8005502:	b911      	cbnz	r1, 800550a <sbrk_aligned+0x12>
 8005504:	f000 fc64 	bl	8005dd0 <_sbrk_r>
 8005508:	6030      	str	r0, [r6, #0]
 800550a:	4621      	mov	r1, r4
 800550c:	4628      	mov	r0, r5
 800550e:	f000 fc5f 	bl	8005dd0 <_sbrk_r>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d103      	bne.n	800551e <sbrk_aligned+0x26>
 8005516:	f04f 34ff 	mov.w	r4, #4294967295
 800551a:	4620      	mov	r0, r4
 800551c:	bd70      	pop	{r4, r5, r6, pc}
 800551e:	1cc4      	adds	r4, r0, #3
 8005520:	f024 0403 	bic.w	r4, r4, #3
 8005524:	42a0      	cmp	r0, r4
 8005526:	d0f8      	beq.n	800551a <sbrk_aligned+0x22>
 8005528:	1a21      	subs	r1, r4, r0
 800552a:	4628      	mov	r0, r5
 800552c:	f000 fc50 	bl	8005dd0 <_sbrk_r>
 8005530:	3001      	adds	r0, #1
 8005532:	d1f2      	bne.n	800551a <sbrk_aligned+0x22>
 8005534:	e7ef      	b.n	8005516 <sbrk_aligned+0x1e>
 8005536:	bf00      	nop
 8005538:	200027b8 	.word	0x200027b8

0800553c <_malloc_r>:
 800553c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005540:	1ccd      	adds	r5, r1, #3
 8005542:	f025 0503 	bic.w	r5, r5, #3
 8005546:	3508      	adds	r5, #8
 8005548:	2d0c      	cmp	r5, #12
 800554a:	bf38      	it	cc
 800554c:	250c      	movcc	r5, #12
 800554e:	2d00      	cmp	r5, #0
 8005550:	4606      	mov	r6, r0
 8005552:	db01      	blt.n	8005558 <_malloc_r+0x1c>
 8005554:	42a9      	cmp	r1, r5
 8005556:	d904      	bls.n	8005562 <_malloc_r+0x26>
 8005558:	230c      	movs	r3, #12
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	2000      	movs	r0, #0
 800555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005638 <_malloc_r+0xfc>
 8005566:	f000 f869 	bl	800563c <__malloc_lock>
 800556a:	f8d8 3000 	ldr.w	r3, [r8]
 800556e:	461c      	mov	r4, r3
 8005570:	bb44      	cbnz	r4, 80055c4 <_malloc_r+0x88>
 8005572:	4629      	mov	r1, r5
 8005574:	4630      	mov	r0, r6
 8005576:	f7ff ffbf 	bl	80054f8 <sbrk_aligned>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	4604      	mov	r4, r0
 800557e:	d158      	bne.n	8005632 <_malloc_r+0xf6>
 8005580:	f8d8 4000 	ldr.w	r4, [r8]
 8005584:	4627      	mov	r7, r4
 8005586:	2f00      	cmp	r7, #0
 8005588:	d143      	bne.n	8005612 <_malloc_r+0xd6>
 800558a:	2c00      	cmp	r4, #0
 800558c:	d04b      	beq.n	8005626 <_malloc_r+0xea>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	4639      	mov	r1, r7
 8005592:	4630      	mov	r0, r6
 8005594:	eb04 0903 	add.w	r9, r4, r3
 8005598:	f000 fc1a 	bl	8005dd0 <_sbrk_r>
 800559c:	4581      	cmp	r9, r0
 800559e:	d142      	bne.n	8005626 <_malloc_r+0xea>
 80055a0:	6821      	ldr	r1, [r4, #0]
 80055a2:	1a6d      	subs	r5, r5, r1
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f7ff ffa6 	bl	80054f8 <sbrk_aligned>
 80055ac:	3001      	adds	r0, #1
 80055ae:	d03a      	beq.n	8005626 <_malloc_r+0xea>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	442b      	add	r3, r5
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	f8d8 3000 	ldr.w	r3, [r8]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	bb62      	cbnz	r2, 8005618 <_malloc_r+0xdc>
 80055be:	f8c8 7000 	str.w	r7, [r8]
 80055c2:	e00f      	b.n	80055e4 <_malloc_r+0xa8>
 80055c4:	6822      	ldr	r2, [r4, #0]
 80055c6:	1b52      	subs	r2, r2, r5
 80055c8:	d420      	bmi.n	800560c <_malloc_r+0xd0>
 80055ca:	2a0b      	cmp	r2, #11
 80055cc:	d917      	bls.n	80055fe <_malloc_r+0xc2>
 80055ce:	1961      	adds	r1, r4, r5
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	6025      	str	r5, [r4, #0]
 80055d4:	bf18      	it	ne
 80055d6:	6059      	strne	r1, [r3, #4]
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	bf08      	it	eq
 80055dc:	f8c8 1000 	streq.w	r1, [r8]
 80055e0:	5162      	str	r2, [r4, r5]
 80055e2:	604b      	str	r3, [r1, #4]
 80055e4:	4630      	mov	r0, r6
 80055e6:	f000 f82f 	bl	8005648 <__malloc_unlock>
 80055ea:	f104 000b 	add.w	r0, r4, #11
 80055ee:	1d23      	adds	r3, r4, #4
 80055f0:	f020 0007 	bic.w	r0, r0, #7
 80055f4:	1ac2      	subs	r2, r0, r3
 80055f6:	bf1c      	itt	ne
 80055f8:	1a1b      	subne	r3, r3, r0
 80055fa:	50a3      	strne	r3, [r4, r2]
 80055fc:	e7af      	b.n	800555e <_malloc_r+0x22>
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	42a3      	cmp	r3, r4
 8005602:	bf0c      	ite	eq
 8005604:	f8c8 2000 	streq.w	r2, [r8]
 8005608:	605a      	strne	r2, [r3, #4]
 800560a:	e7eb      	b.n	80055e4 <_malloc_r+0xa8>
 800560c:	4623      	mov	r3, r4
 800560e:	6864      	ldr	r4, [r4, #4]
 8005610:	e7ae      	b.n	8005570 <_malloc_r+0x34>
 8005612:	463c      	mov	r4, r7
 8005614:	687f      	ldr	r7, [r7, #4]
 8005616:	e7b6      	b.n	8005586 <_malloc_r+0x4a>
 8005618:	461a      	mov	r2, r3
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	42a3      	cmp	r3, r4
 800561e:	d1fb      	bne.n	8005618 <_malloc_r+0xdc>
 8005620:	2300      	movs	r3, #0
 8005622:	6053      	str	r3, [r2, #4]
 8005624:	e7de      	b.n	80055e4 <_malloc_r+0xa8>
 8005626:	230c      	movs	r3, #12
 8005628:	6033      	str	r3, [r6, #0]
 800562a:	4630      	mov	r0, r6
 800562c:	f000 f80c 	bl	8005648 <__malloc_unlock>
 8005630:	e794      	b.n	800555c <_malloc_r+0x20>
 8005632:	6005      	str	r5, [r0, #0]
 8005634:	e7d6      	b.n	80055e4 <_malloc_r+0xa8>
 8005636:	bf00      	nop
 8005638:	200027bc 	.word	0x200027bc

0800563c <__malloc_lock>:
 800563c:	4801      	ldr	r0, [pc, #4]	@ (8005644 <__malloc_lock+0x8>)
 800563e:	f7ff bee8 	b.w	8005412 <__retarget_lock_acquire_recursive>
 8005642:	bf00      	nop
 8005644:	200027b4 	.word	0x200027b4

08005648 <__malloc_unlock>:
 8005648:	4801      	ldr	r0, [pc, #4]	@ (8005650 <__malloc_unlock+0x8>)
 800564a:	f7ff bee3 	b.w	8005414 <__retarget_lock_release_recursive>
 800564e:	bf00      	nop
 8005650:	200027b4 	.word	0x200027b4

08005654 <__ssputs_r>:
 8005654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	688e      	ldr	r6, [r1, #8]
 800565a:	461f      	mov	r7, r3
 800565c:	42be      	cmp	r6, r7
 800565e:	680b      	ldr	r3, [r1, #0]
 8005660:	4682      	mov	sl, r0
 8005662:	460c      	mov	r4, r1
 8005664:	4690      	mov	r8, r2
 8005666:	d82d      	bhi.n	80056c4 <__ssputs_r+0x70>
 8005668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800566c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005670:	d026      	beq.n	80056c0 <__ssputs_r+0x6c>
 8005672:	6965      	ldr	r5, [r4, #20]
 8005674:	6909      	ldr	r1, [r1, #16]
 8005676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800567a:	eba3 0901 	sub.w	r9, r3, r1
 800567e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005682:	1c7b      	adds	r3, r7, #1
 8005684:	444b      	add	r3, r9
 8005686:	106d      	asrs	r5, r5, #1
 8005688:	429d      	cmp	r5, r3
 800568a:	bf38      	it	cc
 800568c:	461d      	movcc	r5, r3
 800568e:	0553      	lsls	r3, r2, #21
 8005690:	d527      	bpl.n	80056e2 <__ssputs_r+0x8e>
 8005692:	4629      	mov	r1, r5
 8005694:	f7ff ff52 	bl	800553c <_malloc_r>
 8005698:	4606      	mov	r6, r0
 800569a:	b360      	cbz	r0, 80056f6 <__ssputs_r+0xa2>
 800569c:	6921      	ldr	r1, [r4, #16]
 800569e:	464a      	mov	r2, r9
 80056a0:	f000 fba6 	bl	8005df0 <memcpy>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	6126      	str	r6, [r4, #16]
 80056b2:	6165      	str	r5, [r4, #20]
 80056b4:	444e      	add	r6, r9
 80056b6:	eba5 0509 	sub.w	r5, r5, r9
 80056ba:	6026      	str	r6, [r4, #0]
 80056bc:	60a5      	str	r5, [r4, #8]
 80056be:	463e      	mov	r6, r7
 80056c0:	42be      	cmp	r6, r7
 80056c2:	d900      	bls.n	80056c6 <__ssputs_r+0x72>
 80056c4:	463e      	mov	r6, r7
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	4632      	mov	r2, r6
 80056ca:	4641      	mov	r1, r8
 80056cc:	f000 fb66 	bl	8005d9c <memmove>
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	1b9b      	subs	r3, r3, r6
 80056d4:	60a3      	str	r3, [r4, #8]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	4433      	add	r3, r6
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	2000      	movs	r0, #0
 80056de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e2:	462a      	mov	r2, r5
 80056e4:	f000 fb99 	bl	8005e1a <_realloc_r>
 80056e8:	4606      	mov	r6, r0
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d1e0      	bne.n	80056b0 <__ssputs_r+0x5c>
 80056ee:	6921      	ldr	r1, [r4, #16]
 80056f0:	4650      	mov	r0, sl
 80056f2:	f7ff feaf 	bl	8005454 <_free_r>
 80056f6:	230c      	movs	r3, #12
 80056f8:	f8ca 3000 	str.w	r3, [sl]
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005702:	81a3      	strh	r3, [r4, #12]
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	e7e9      	b.n	80056de <__ssputs_r+0x8a>
	...

0800570c <_svfiprintf_r>:
 800570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	4698      	mov	r8, r3
 8005712:	898b      	ldrh	r3, [r1, #12]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	b09d      	sub	sp, #116	@ 0x74
 8005718:	4607      	mov	r7, r0
 800571a:	460d      	mov	r5, r1
 800571c:	4614      	mov	r4, r2
 800571e:	d510      	bpl.n	8005742 <_svfiprintf_r+0x36>
 8005720:	690b      	ldr	r3, [r1, #16]
 8005722:	b973      	cbnz	r3, 8005742 <_svfiprintf_r+0x36>
 8005724:	2140      	movs	r1, #64	@ 0x40
 8005726:	f7ff ff09 	bl	800553c <_malloc_r>
 800572a:	6028      	str	r0, [r5, #0]
 800572c:	6128      	str	r0, [r5, #16]
 800572e:	b930      	cbnz	r0, 800573e <_svfiprintf_r+0x32>
 8005730:	230c      	movs	r3, #12
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	b01d      	add	sp, #116	@ 0x74
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	2340      	movs	r3, #64	@ 0x40
 8005740:	616b      	str	r3, [r5, #20]
 8005742:	2300      	movs	r3, #0
 8005744:	9309      	str	r3, [sp, #36]	@ 0x24
 8005746:	2320      	movs	r3, #32
 8005748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800574c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005750:	2330      	movs	r3, #48	@ 0x30
 8005752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058f0 <_svfiprintf_r+0x1e4>
 8005756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800575a:	f04f 0901 	mov.w	r9, #1
 800575e:	4623      	mov	r3, r4
 8005760:	469a      	mov	sl, r3
 8005762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005766:	b10a      	cbz	r2, 800576c <_svfiprintf_r+0x60>
 8005768:	2a25      	cmp	r2, #37	@ 0x25
 800576a:	d1f9      	bne.n	8005760 <_svfiprintf_r+0x54>
 800576c:	ebba 0b04 	subs.w	fp, sl, r4
 8005770:	d00b      	beq.n	800578a <_svfiprintf_r+0x7e>
 8005772:	465b      	mov	r3, fp
 8005774:	4622      	mov	r2, r4
 8005776:	4629      	mov	r1, r5
 8005778:	4638      	mov	r0, r7
 800577a:	f7ff ff6b 	bl	8005654 <__ssputs_r>
 800577e:	3001      	adds	r0, #1
 8005780:	f000 80a7 	beq.w	80058d2 <_svfiprintf_r+0x1c6>
 8005784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005786:	445a      	add	r2, fp
 8005788:	9209      	str	r2, [sp, #36]	@ 0x24
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 809f 	beq.w	80058d2 <_svfiprintf_r+0x1c6>
 8005794:	2300      	movs	r3, #0
 8005796:	f04f 32ff 	mov.w	r2, #4294967295
 800579a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800579e:	f10a 0a01 	add.w	sl, sl, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	9307      	str	r3, [sp, #28]
 80057a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80057ac:	4654      	mov	r4, sl
 80057ae:	2205      	movs	r2, #5
 80057b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b4:	484e      	ldr	r0, [pc, #312]	@ (80058f0 <_svfiprintf_r+0x1e4>)
 80057b6:	f7fa fd0b 	bl	80001d0 <memchr>
 80057ba:	9a04      	ldr	r2, [sp, #16]
 80057bc:	b9d8      	cbnz	r0, 80057f6 <_svfiprintf_r+0xea>
 80057be:	06d0      	lsls	r0, r2, #27
 80057c0:	bf44      	itt	mi
 80057c2:	2320      	movmi	r3, #32
 80057c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057c8:	0711      	lsls	r1, r2, #28
 80057ca:	bf44      	itt	mi
 80057cc:	232b      	movmi	r3, #43	@ 0x2b
 80057ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057d2:	f89a 3000 	ldrb.w	r3, [sl]
 80057d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057d8:	d015      	beq.n	8005806 <_svfiprintf_r+0xfa>
 80057da:	9a07      	ldr	r2, [sp, #28]
 80057dc:	4654      	mov	r4, sl
 80057de:	2000      	movs	r0, #0
 80057e0:	f04f 0c0a 	mov.w	ip, #10
 80057e4:	4621      	mov	r1, r4
 80057e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ea:	3b30      	subs	r3, #48	@ 0x30
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d94b      	bls.n	8005888 <_svfiprintf_r+0x17c>
 80057f0:	b1b0      	cbz	r0, 8005820 <_svfiprintf_r+0x114>
 80057f2:	9207      	str	r2, [sp, #28]
 80057f4:	e014      	b.n	8005820 <_svfiprintf_r+0x114>
 80057f6:	eba0 0308 	sub.w	r3, r0, r8
 80057fa:	fa09 f303 	lsl.w	r3, r9, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	46a2      	mov	sl, r4
 8005804:	e7d2      	b.n	80057ac <_svfiprintf_r+0xa0>
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	1d19      	adds	r1, r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	9103      	str	r1, [sp, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	bfbb      	ittet	lt
 8005812:	425b      	neglt	r3, r3
 8005814:	f042 0202 	orrlt.w	r2, r2, #2
 8005818:	9307      	strge	r3, [sp, #28]
 800581a:	9307      	strlt	r3, [sp, #28]
 800581c:	bfb8      	it	lt
 800581e:	9204      	strlt	r2, [sp, #16]
 8005820:	7823      	ldrb	r3, [r4, #0]
 8005822:	2b2e      	cmp	r3, #46	@ 0x2e
 8005824:	d10a      	bne.n	800583c <_svfiprintf_r+0x130>
 8005826:	7863      	ldrb	r3, [r4, #1]
 8005828:	2b2a      	cmp	r3, #42	@ 0x2a
 800582a:	d132      	bne.n	8005892 <_svfiprintf_r+0x186>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	9203      	str	r2, [sp, #12]
 8005834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005838:	3402      	adds	r4, #2
 800583a:	9305      	str	r3, [sp, #20]
 800583c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005900 <_svfiprintf_r+0x1f4>
 8005840:	7821      	ldrb	r1, [r4, #0]
 8005842:	2203      	movs	r2, #3
 8005844:	4650      	mov	r0, sl
 8005846:	f7fa fcc3 	bl	80001d0 <memchr>
 800584a:	b138      	cbz	r0, 800585c <_svfiprintf_r+0x150>
 800584c:	9b04      	ldr	r3, [sp, #16]
 800584e:	eba0 000a 	sub.w	r0, r0, sl
 8005852:	2240      	movs	r2, #64	@ 0x40
 8005854:	4082      	lsls	r2, r0
 8005856:	4313      	orrs	r3, r2
 8005858:	3401      	adds	r4, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	4824      	ldr	r0, [pc, #144]	@ (80058f4 <_svfiprintf_r+0x1e8>)
 8005862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005866:	2206      	movs	r2, #6
 8005868:	f7fa fcb2 	bl	80001d0 <memchr>
 800586c:	2800      	cmp	r0, #0
 800586e:	d036      	beq.n	80058de <_svfiprintf_r+0x1d2>
 8005870:	4b21      	ldr	r3, [pc, #132]	@ (80058f8 <_svfiprintf_r+0x1ec>)
 8005872:	bb1b      	cbnz	r3, 80058bc <_svfiprintf_r+0x1b0>
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	3307      	adds	r3, #7
 8005878:	f023 0307 	bic.w	r3, r3, #7
 800587c:	3308      	adds	r3, #8
 800587e:	9303      	str	r3, [sp, #12]
 8005880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005882:	4433      	add	r3, r6
 8005884:	9309      	str	r3, [sp, #36]	@ 0x24
 8005886:	e76a      	b.n	800575e <_svfiprintf_r+0x52>
 8005888:	fb0c 3202 	mla	r2, ip, r2, r3
 800588c:	460c      	mov	r4, r1
 800588e:	2001      	movs	r0, #1
 8005890:	e7a8      	b.n	80057e4 <_svfiprintf_r+0xd8>
 8005892:	2300      	movs	r3, #0
 8005894:	3401      	adds	r4, #1
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	4619      	mov	r1, r3
 800589a:	f04f 0c0a 	mov.w	ip, #10
 800589e:	4620      	mov	r0, r4
 80058a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a4:	3a30      	subs	r2, #48	@ 0x30
 80058a6:	2a09      	cmp	r2, #9
 80058a8:	d903      	bls.n	80058b2 <_svfiprintf_r+0x1a6>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0c6      	beq.n	800583c <_svfiprintf_r+0x130>
 80058ae:	9105      	str	r1, [sp, #20]
 80058b0:	e7c4      	b.n	800583c <_svfiprintf_r+0x130>
 80058b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b6:	4604      	mov	r4, r0
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f0      	b.n	800589e <_svfiprintf_r+0x192>
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4b0e      	ldr	r3, [pc, #56]	@ (80058fc <_svfiprintf_r+0x1f0>)
 80058c4:	a904      	add	r1, sp, #16
 80058c6:	4638      	mov	r0, r7
 80058c8:	f3af 8000 	nop.w
 80058cc:	1c42      	adds	r2, r0, #1
 80058ce:	4606      	mov	r6, r0
 80058d0:	d1d6      	bne.n	8005880 <_svfiprintf_r+0x174>
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	065b      	lsls	r3, r3, #25
 80058d6:	f53f af2d 	bmi.w	8005734 <_svfiprintf_r+0x28>
 80058da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058dc:	e72c      	b.n	8005738 <_svfiprintf_r+0x2c>
 80058de:	ab03      	add	r3, sp, #12
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	462a      	mov	r2, r5
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <_svfiprintf_r+0x1f0>)
 80058e6:	a904      	add	r1, sp, #16
 80058e8:	4638      	mov	r0, r7
 80058ea:	f000 f879 	bl	80059e0 <_printf_i>
 80058ee:	e7ed      	b.n	80058cc <_svfiprintf_r+0x1c0>
 80058f0:	0800652b 	.word	0x0800652b
 80058f4:	08006535 	.word	0x08006535
 80058f8:	00000000 	.word	0x00000000
 80058fc:	08005655 	.word	0x08005655
 8005900:	08006531 	.word	0x08006531

08005904 <_printf_common>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	4616      	mov	r6, r2
 800590a:	4698      	mov	r8, r3
 800590c:	688a      	ldr	r2, [r1, #8]
 800590e:	690b      	ldr	r3, [r1, #16]
 8005910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005914:	4293      	cmp	r3, r2
 8005916:	bfb8      	it	lt
 8005918:	4613      	movlt	r3, r2
 800591a:	6033      	str	r3, [r6, #0]
 800591c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005920:	4607      	mov	r7, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b10a      	cbz	r2, 800592a <_printf_common+0x26>
 8005926:	3301      	adds	r3, #1
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	0699      	lsls	r1, r3, #26
 800592e:	bf42      	ittt	mi
 8005930:	6833      	ldrmi	r3, [r6, #0]
 8005932:	3302      	addmi	r3, #2
 8005934:	6033      	strmi	r3, [r6, #0]
 8005936:	6825      	ldr	r5, [r4, #0]
 8005938:	f015 0506 	ands.w	r5, r5, #6
 800593c:	d106      	bne.n	800594c <_printf_common+0x48>
 800593e:	f104 0a19 	add.w	sl, r4, #25
 8005942:	68e3      	ldr	r3, [r4, #12]
 8005944:	6832      	ldr	r2, [r6, #0]
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	42ab      	cmp	r3, r5
 800594a:	dc26      	bgt.n	800599a <_printf_common+0x96>
 800594c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	3b00      	subs	r3, #0
 8005954:	bf18      	it	ne
 8005956:	2301      	movne	r3, #1
 8005958:	0692      	lsls	r2, r2, #26
 800595a:	d42b      	bmi.n	80059b4 <_printf_common+0xb0>
 800595c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005960:	4641      	mov	r1, r8
 8005962:	4638      	mov	r0, r7
 8005964:	47c8      	blx	r9
 8005966:	3001      	adds	r0, #1
 8005968:	d01e      	beq.n	80059a8 <_printf_common+0xa4>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	6922      	ldr	r2, [r4, #16]
 800596e:	f003 0306 	and.w	r3, r3, #6
 8005972:	2b04      	cmp	r3, #4
 8005974:	bf02      	ittt	eq
 8005976:	68e5      	ldreq	r5, [r4, #12]
 8005978:	6833      	ldreq	r3, [r6, #0]
 800597a:	1aed      	subeq	r5, r5, r3
 800597c:	68a3      	ldr	r3, [r4, #8]
 800597e:	bf0c      	ite	eq
 8005980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005984:	2500      	movne	r5, #0
 8005986:	4293      	cmp	r3, r2
 8005988:	bfc4      	itt	gt
 800598a:	1a9b      	subgt	r3, r3, r2
 800598c:	18ed      	addgt	r5, r5, r3
 800598e:	2600      	movs	r6, #0
 8005990:	341a      	adds	r4, #26
 8005992:	42b5      	cmp	r5, r6
 8005994:	d11a      	bne.n	80059cc <_printf_common+0xc8>
 8005996:	2000      	movs	r0, #0
 8005998:	e008      	b.n	80059ac <_printf_common+0xa8>
 800599a:	2301      	movs	r3, #1
 800599c:	4652      	mov	r2, sl
 800599e:	4641      	mov	r1, r8
 80059a0:	4638      	mov	r0, r7
 80059a2:	47c8      	blx	r9
 80059a4:	3001      	adds	r0, #1
 80059a6:	d103      	bne.n	80059b0 <_printf_common+0xac>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b0:	3501      	adds	r5, #1
 80059b2:	e7c6      	b.n	8005942 <_printf_common+0x3e>
 80059b4:	18e1      	adds	r1, r4, r3
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	2030      	movs	r0, #48	@ 0x30
 80059ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059be:	4422      	add	r2, r4
 80059c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059c8:	3302      	adds	r3, #2
 80059ca:	e7c7      	b.n	800595c <_printf_common+0x58>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4622      	mov	r2, r4
 80059d0:	4641      	mov	r1, r8
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c8      	blx	r9
 80059d6:	3001      	adds	r0, #1
 80059d8:	d0e6      	beq.n	80059a8 <_printf_common+0xa4>
 80059da:	3601      	adds	r6, #1
 80059dc:	e7d9      	b.n	8005992 <_printf_common+0x8e>
	...

080059e0 <_printf_i>:
 80059e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	7e0f      	ldrb	r7, [r1, #24]
 80059e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059e8:	2f78      	cmp	r7, #120	@ 0x78
 80059ea:	4691      	mov	r9, r2
 80059ec:	4680      	mov	r8, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	469a      	mov	sl, r3
 80059f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059f6:	d807      	bhi.n	8005a08 <_printf_i+0x28>
 80059f8:	2f62      	cmp	r7, #98	@ 0x62
 80059fa:	d80a      	bhi.n	8005a12 <_printf_i+0x32>
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	f000 80d2 	beq.w	8005ba6 <_printf_i+0x1c6>
 8005a02:	2f58      	cmp	r7, #88	@ 0x58
 8005a04:	f000 80b9 	beq.w	8005b7a <_printf_i+0x19a>
 8005a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a10:	e03a      	b.n	8005a88 <_printf_i+0xa8>
 8005a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a16:	2b15      	cmp	r3, #21
 8005a18:	d8f6      	bhi.n	8005a08 <_printf_i+0x28>
 8005a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a20 <_printf_i+0x40>)
 8005a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a20:	08005a79 	.word	0x08005a79
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a09 	.word	0x08005a09
 8005a2c:	08005a09 	.word	0x08005a09
 8005a30:	08005a09 	.word	0x08005a09
 8005a34:	08005a09 	.word	0x08005a09
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a09 	.word	0x08005a09
 8005a40:	08005a09 	.word	0x08005a09
 8005a44:	08005a09 	.word	0x08005a09
 8005a48:	08005a09 	.word	0x08005a09
 8005a4c:	08005b8d 	.word	0x08005b8d
 8005a50:	08005ab7 	.word	0x08005ab7
 8005a54:	08005b47 	.word	0x08005b47
 8005a58:	08005a09 	.word	0x08005a09
 8005a5c:	08005a09 	.word	0x08005a09
 8005a60:	08005baf 	.word	0x08005baf
 8005a64:	08005a09 	.word	0x08005a09
 8005a68:	08005ab7 	.word	0x08005ab7
 8005a6c:	08005a09 	.word	0x08005a09
 8005a70:	08005a09 	.word	0x08005a09
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6032      	str	r2, [r6, #0]
 8005a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e09d      	b.n	8005bc8 <_printf_i+0x1e8>
 8005a8c:	6833      	ldr	r3, [r6, #0]
 8005a8e:	6820      	ldr	r0, [r4, #0]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	6031      	str	r1, [r6, #0]
 8005a94:	0606      	lsls	r6, r0, #24
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0xbc>
 8005a98:	681d      	ldr	r5, [r3, #0]
 8005a9a:	e003      	b.n	8005aa4 <_printf_i+0xc4>
 8005a9c:	0645      	lsls	r5, r0, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0xb8>
 8005aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	da03      	bge.n	8005ab0 <_printf_i+0xd0>
 8005aa8:	232d      	movs	r3, #45	@ 0x2d
 8005aaa:	426d      	negs	r5, r5
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab0:	4859      	ldr	r0, [pc, #356]	@ (8005c18 <_printf_i+0x238>)
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	e011      	b.n	8005ada <_printf_i+0xfa>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	0608      	lsls	r0, r1, #24
 8005abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ac0:	d402      	bmi.n	8005ac8 <_printf_i+0xe8>
 8005ac2:	0649      	lsls	r1, r1, #25
 8005ac4:	bf48      	it	mi
 8005ac6:	b2ad      	uxthmi	r5, r5
 8005ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aca:	4853      	ldr	r0, [pc, #332]	@ (8005c18 <_printf_i+0x238>)
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	bf14      	ite	ne
 8005ad0:	230a      	movne	r3, #10
 8005ad2:	2308      	moveq	r3, #8
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ada:	6866      	ldr	r6, [r4, #4]
 8005adc:	60a6      	str	r6, [r4, #8]
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	bfa2      	ittt	ge
 8005ae2:	6821      	ldrge	r1, [r4, #0]
 8005ae4:	f021 0104 	bicge.w	r1, r1, #4
 8005ae8:	6021      	strge	r1, [r4, #0]
 8005aea:	b90d      	cbnz	r5, 8005af0 <_printf_i+0x110>
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	d04b      	beq.n	8005b88 <_printf_i+0x1a8>
 8005af0:	4616      	mov	r6, r2
 8005af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005af6:	fb03 5711 	mls	r7, r3, r1, r5
 8005afa:	5dc7      	ldrb	r7, [r0, r7]
 8005afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b00:	462f      	mov	r7, r5
 8005b02:	42bb      	cmp	r3, r7
 8005b04:	460d      	mov	r5, r1
 8005b06:	d9f4      	bls.n	8005af2 <_printf_i+0x112>
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d10b      	bne.n	8005b24 <_printf_i+0x144>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	07df      	lsls	r7, r3, #31
 8005b10:	d508      	bpl.n	8005b24 <_printf_i+0x144>
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	6861      	ldr	r1, [r4, #4]
 8005b16:	4299      	cmp	r1, r3
 8005b18:	bfde      	ittt	le
 8005b1a:	2330      	movle	r3, #48	@ 0x30
 8005b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b24:	1b92      	subs	r2, r2, r6
 8005b26:	6122      	str	r2, [r4, #16]
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	aa03      	add	r2, sp, #12
 8005b30:	4621      	mov	r1, r4
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fee6 	bl	8005904 <_printf_common>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d14a      	bne.n	8005bd2 <_printf_i+0x1f2>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	b004      	add	sp, #16
 8005b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f043 0320 	orr.w	r3, r3, #32
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	4833      	ldr	r0, [pc, #204]	@ (8005c1c <_printf_i+0x23c>)
 8005b50:	2778      	movs	r7, #120	@ 0x78
 8005b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	6831      	ldr	r1, [r6, #0]
 8005b5a:	061f      	lsls	r7, r3, #24
 8005b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b60:	d402      	bmi.n	8005b68 <_printf_i+0x188>
 8005b62:	065f      	lsls	r7, r3, #25
 8005b64:	bf48      	it	mi
 8005b66:	b2ad      	uxthmi	r5, r5
 8005b68:	6031      	str	r1, [r6, #0]
 8005b6a:	07d9      	lsls	r1, r3, #31
 8005b6c:	bf44      	itt	mi
 8005b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b72:	6023      	strmi	r3, [r4, #0]
 8005b74:	b11d      	cbz	r5, 8005b7e <_printf_i+0x19e>
 8005b76:	2310      	movs	r3, #16
 8005b78:	e7ac      	b.n	8005ad4 <_printf_i+0xf4>
 8005b7a:	4827      	ldr	r0, [pc, #156]	@ (8005c18 <_printf_i+0x238>)
 8005b7c:	e7e9      	b.n	8005b52 <_printf_i+0x172>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	e7f6      	b.n	8005b76 <_printf_i+0x196>
 8005b88:	4616      	mov	r6, r2
 8005b8a:	e7bd      	b.n	8005b08 <_printf_i+0x128>
 8005b8c:	6833      	ldr	r3, [r6, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	6961      	ldr	r1, [r4, #20]
 8005b92:	1d18      	adds	r0, r3, #4
 8005b94:	6030      	str	r0, [r6, #0]
 8005b96:	062e      	lsls	r6, r5, #24
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0x1c0>
 8005b9c:	6019      	str	r1, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <_printf_i+0x1c6>
 8005ba0:	0668      	lsls	r0, r5, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0x1bc>
 8005ba4:	8019      	strh	r1, [r3, #0]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	4616      	mov	r6, r2
 8005bac:	e7bc      	b.n	8005b28 <_printf_i+0x148>
 8005bae:	6833      	ldr	r3, [r6, #0]
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	6032      	str	r2, [r6, #0]
 8005bb4:	681e      	ldr	r6, [r3, #0]
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fa fb08 	bl	80001d0 <memchr>
 8005bc0:	b108      	cbz	r0, 8005bc6 <_printf_i+0x1e6>
 8005bc2:	1b80      	subs	r0, r0, r6
 8005bc4:	6060      	str	r0, [r4, #4]
 8005bc6:	6863      	ldr	r3, [r4, #4]
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd0:	e7aa      	b.n	8005b28 <_printf_i+0x148>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4640      	mov	r0, r8
 8005bda:	47d0      	blx	sl
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d0ad      	beq.n	8005b3c <_printf_i+0x15c>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	079b      	lsls	r3, r3, #30
 8005be4:	d413      	bmi.n	8005c0e <_printf_i+0x22e>
 8005be6:	68e0      	ldr	r0, [r4, #12]
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	4298      	cmp	r0, r3
 8005bec:	bfb8      	it	lt
 8005bee:	4618      	movlt	r0, r3
 8005bf0:	e7a6      	b.n	8005b40 <_printf_i+0x160>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	47d0      	blx	sl
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d09d      	beq.n	8005b3c <_printf_i+0x15c>
 8005c00:	3501      	adds	r5, #1
 8005c02:	68e3      	ldr	r3, [r4, #12]
 8005c04:	9903      	ldr	r1, [sp, #12]
 8005c06:	1a5b      	subs	r3, r3, r1
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dcf2      	bgt.n	8005bf2 <_printf_i+0x212>
 8005c0c:	e7eb      	b.n	8005be6 <_printf_i+0x206>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	f104 0619 	add.w	r6, r4, #25
 8005c14:	e7f5      	b.n	8005c02 <_printf_i+0x222>
 8005c16:	bf00      	nop
 8005c18:	0800653c 	.word	0x0800653c
 8005c1c:	0800654d 	.word	0x0800654d

08005c20 <__sflush_r>:
 8005c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	0716      	lsls	r6, r2, #28
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	d454      	bmi.n	8005cda <__sflush_r+0xba>
 8005c30:	684b      	ldr	r3, [r1, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dc02      	bgt.n	8005c3c <__sflush_r+0x1c>
 8005c36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dd48      	ble.n	8005cce <__sflush_r+0xae>
 8005c3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d045      	beq.n	8005cce <__sflush_r+0xae>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c48:	682f      	ldr	r7, [r5, #0]
 8005c4a:	6a21      	ldr	r1, [r4, #32]
 8005c4c:	602b      	str	r3, [r5, #0]
 8005c4e:	d030      	beq.n	8005cb2 <__sflush_r+0x92>
 8005c50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	0759      	lsls	r1, r3, #29
 8005c56:	d505      	bpl.n	8005c64 <__sflush_r+0x44>
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c5e:	b10b      	cbz	r3, 8005c64 <__sflush_r+0x44>
 8005c60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b0      	blx	r6
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	d106      	bne.n	8005c82 <__sflush_r+0x62>
 8005c74:	6829      	ldr	r1, [r5, #0]
 8005c76:	291d      	cmp	r1, #29
 8005c78:	d82b      	bhi.n	8005cd2 <__sflush_r+0xb2>
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <__sflush_r+0x104>)
 8005c7c:	410a      	asrs	r2, r1
 8005c7e:	07d6      	lsls	r6, r2, #31
 8005c80:	d427      	bmi.n	8005cd2 <__sflush_r+0xb2>
 8005c82:	2200      	movs	r2, #0
 8005c84:	6062      	str	r2, [r4, #4]
 8005c86:	04d9      	lsls	r1, r3, #19
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	d504      	bpl.n	8005c98 <__sflush_r+0x78>
 8005c8e:	1c42      	adds	r2, r0, #1
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0x76>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b903      	cbnz	r3, 8005c98 <__sflush_r+0x78>
 8005c96:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c9a:	602f      	str	r7, [r5, #0]
 8005c9c:	b1b9      	cbz	r1, 8005cce <__sflush_r+0xae>
 8005c9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	d002      	beq.n	8005cac <__sflush_r+0x8c>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff fbd4 	bl	8005454 <_free_r>
 8005cac:	2300      	movs	r3, #0
 8005cae:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cb0:	e00d      	b.n	8005cce <__sflush_r+0xae>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b0      	blx	r6
 8005cb8:	4602      	mov	r2, r0
 8005cba:	1c50      	adds	r0, r2, #1
 8005cbc:	d1c9      	bne.n	8005c52 <__sflush_r+0x32>
 8005cbe:	682b      	ldr	r3, [r5, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0c6      	beq.n	8005c52 <__sflush_r+0x32>
 8005cc4:	2b1d      	cmp	r3, #29
 8005cc6:	d001      	beq.n	8005ccc <__sflush_r+0xac>
 8005cc8:	2b16      	cmp	r3, #22
 8005cca:	d11e      	bne.n	8005d0a <__sflush_r+0xea>
 8005ccc:	602f      	str	r7, [r5, #0]
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e022      	b.n	8005d18 <__sflush_r+0xf8>
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd6:	b21b      	sxth	r3, r3
 8005cd8:	e01b      	b.n	8005d12 <__sflush_r+0xf2>
 8005cda:	690f      	ldr	r7, [r1, #16]
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	d0f6      	beq.n	8005cce <__sflush_r+0xae>
 8005ce0:	0793      	lsls	r3, r2, #30
 8005ce2:	680e      	ldr	r6, [r1, #0]
 8005ce4:	bf08      	it	eq
 8005ce6:	694b      	ldreq	r3, [r1, #20]
 8005ce8:	600f      	str	r7, [r1, #0]
 8005cea:	bf18      	it	ne
 8005cec:	2300      	movne	r3, #0
 8005cee:	eba6 0807 	sub.w	r8, r6, r7
 8005cf2:	608b      	str	r3, [r1, #8]
 8005cf4:	f1b8 0f00 	cmp.w	r8, #0
 8005cf8:	dde9      	ble.n	8005cce <__sflush_r+0xae>
 8005cfa:	6a21      	ldr	r1, [r4, #32]
 8005cfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cfe:	4643      	mov	r3, r8
 8005d00:	463a      	mov	r2, r7
 8005d02:	4628      	mov	r0, r5
 8005d04:	47b0      	blx	r6
 8005d06:	2800      	cmp	r0, #0
 8005d08:	dc08      	bgt.n	8005d1c <__sflush_r+0xfc>
 8005d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1c:	4407      	add	r7, r0
 8005d1e:	eba8 0800 	sub.w	r8, r8, r0
 8005d22:	e7e7      	b.n	8005cf4 <__sflush_r+0xd4>
 8005d24:	dfbffffe 	.word	0xdfbffffe

08005d28 <_fflush_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b913      	cbnz	r3, 8005d38 <_fflush_r+0x10>
 8005d32:	2500      	movs	r5, #0
 8005d34:	4628      	mov	r0, r5
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	b118      	cbz	r0, 8005d42 <_fflush_r+0x1a>
 8005d3a:	6a03      	ldr	r3, [r0, #32]
 8005d3c:	b90b      	cbnz	r3, 8005d42 <_fflush_r+0x1a>
 8005d3e:	f7ff fa55 	bl	80051ec <__sinit>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f3      	beq.n	8005d32 <_fflush_r+0xa>
 8005d4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d404      	bmi.n	8005d5a <_fflush_r+0x32>
 8005d50:	0599      	lsls	r1, r3, #22
 8005d52:	d402      	bmi.n	8005d5a <_fflush_r+0x32>
 8005d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d56:	f7ff fb5c 	bl	8005412 <__retarget_lock_acquire_recursive>
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	f7ff ff5f 	bl	8005c20 <__sflush_r>
 8005d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d64:	07da      	lsls	r2, r3, #31
 8005d66:	4605      	mov	r5, r0
 8005d68:	d4e4      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	059b      	lsls	r3, r3, #22
 8005d6e:	d4e1      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d72:	f7ff fb4f 	bl	8005414 <__retarget_lock_release_recursive>
 8005d76:	e7dd      	b.n	8005d34 <_fflush_r+0xc>

08005d78 <fiprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	b503      	push	{r0, r1, lr}
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	ab03      	add	r3, sp, #12
 8005d80:	4805      	ldr	r0, [pc, #20]	@ (8005d98 <fiprintf+0x20>)
 8005d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	f000 f89d 	bl	8005ec8 <_vfiprintf_r>
 8005d8e:	b002      	add	sp, #8
 8005d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d94:	b003      	add	sp, #12
 8005d96:	4770      	bx	lr
 8005d98:	20000064 	.word	0x20000064

08005d9c <memmove>:
 8005d9c:	4288      	cmp	r0, r1
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	eb01 0402 	add.w	r4, r1, r2
 8005da4:	d902      	bls.n	8005dac <memmove+0x10>
 8005da6:	4284      	cmp	r4, r0
 8005da8:	4623      	mov	r3, r4
 8005daa:	d807      	bhi.n	8005dbc <memmove+0x20>
 8005dac:	1e43      	subs	r3, r0, #1
 8005dae:	42a1      	cmp	r1, r4
 8005db0:	d008      	beq.n	8005dc4 <memmove+0x28>
 8005db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dba:	e7f8      	b.n	8005dae <memmove+0x12>
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	d100      	bne.n	8005dc6 <memmove+0x2a>
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dce:	e7f7      	b.n	8005dc0 <memmove+0x24>

08005dd0 <_sbrk_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d06      	ldr	r5, [pc, #24]	@ (8005dec <_sbrk_r+0x1c>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fc f956 	bl	800208c <_sbrk>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_sbrk_r+0x1a>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_sbrk_r+0x1a>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	200027b0 	.word	0x200027b0

08005df0 <memcpy>:
 8005df0:	440a      	add	r2, r1
 8005df2:	4291      	cmp	r1, r2
 8005df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df8:	d100      	bne.n	8005dfc <memcpy+0xc>
 8005dfa:	4770      	bx	lr
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e06:	4291      	cmp	r1, r2
 8005e08:	d1f9      	bne.n	8005dfe <memcpy+0xe>
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <abort>:
 8005e0c:	b508      	push	{r3, lr}
 8005e0e:	2006      	movs	r0, #6
 8005e10:	f000 fa2e 	bl	8006270 <raise>
 8005e14:	2001      	movs	r0, #1
 8005e16:	f7fc f8c1 	bl	8001f9c <_exit>

08005e1a <_realloc_r>:
 8005e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1e:	4680      	mov	r8, r0
 8005e20:	4615      	mov	r5, r2
 8005e22:	460c      	mov	r4, r1
 8005e24:	b921      	cbnz	r1, 8005e30 <_realloc_r+0x16>
 8005e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	f7ff bb86 	b.w	800553c <_malloc_r>
 8005e30:	b92a      	cbnz	r2, 8005e3e <_realloc_r+0x24>
 8005e32:	f7ff fb0f 	bl	8005454 <_free_r>
 8005e36:	2400      	movs	r4, #0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e3e:	f000 fa33 	bl	80062a8 <_malloc_usable_size_r>
 8005e42:	4285      	cmp	r5, r0
 8005e44:	4606      	mov	r6, r0
 8005e46:	d802      	bhi.n	8005e4e <_realloc_r+0x34>
 8005e48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e4c:	d8f4      	bhi.n	8005e38 <_realloc_r+0x1e>
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4640      	mov	r0, r8
 8005e52:	f7ff fb73 	bl	800553c <_malloc_r>
 8005e56:	4607      	mov	r7, r0
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0ec      	beq.n	8005e36 <_realloc_r+0x1c>
 8005e5c:	42b5      	cmp	r5, r6
 8005e5e:	462a      	mov	r2, r5
 8005e60:	4621      	mov	r1, r4
 8005e62:	bf28      	it	cs
 8005e64:	4632      	movcs	r2, r6
 8005e66:	f7ff ffc3 	bl	8005df0 <memcpy>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	f7ff faf1 	bl	8005454 <_free_r>
 8005e72:	463c      	mov	r4, r7
 8005e74:	e7e0      	b.n	8005e38 <_realloc_r+0x1e>

08005e76 <__sfputc_r>:
 8005e76:	6893      	ldr	r3, [r2, #8]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	b410      	push	{r4}
 8005e7e:	6093      	str	r3, [r2, #8]
 8005e80:	da08      	bge.n	8005e94 <__sfputc_r+0x1e>
 8005e82:	6994      	ldr	r4, [r2, #24]
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	db01      	blt.n	8005e8c <__sfputc_r+0x16>
 8005e88:	290a      	cmp	r1, #10
 8005e8a:	d103      	bne.n	8005e94 <__sfputc_r+0x1e>
 8005e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e90:	f000 b932 	b.w	80060f8 <__swbuf_r>
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	1c58      	adds	r0, r3, #1
 8005e98:	6010      	str	r0, [r2, #0]
 8005e9a:	7019      	strb	r1, [r3, #0]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <__sfputs_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	460f      	mov	r7, r1
 8005eaa:	4614      	mov	r4, r2
 8005eac:	18d5      	adds	r5, r2, r3
 8005eae:	42ac      	cmp	r4, r5
 8005eb0:	d101      	bne.n	8005eb6 <__sfputs_r+0x12>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e007      	b.n	8005ec6 <__sfputs_r+0x22>
 8005eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eba:	463a      	mov	r2, r7
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff ffda 	bl	8005e76 <__sfputc_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d1f3      	bne.n	8005eae <__sfputs_r+0xa>
 8005ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ec8 <_vfiprintf_r>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	460d      	mov	r5, r1
 8005ece:	b09d      	sub	sp, #116	@ 0x74
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	4698      	mov	r8, r3
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	b118      	cbz	r0, 8005ee0 <_vfiprintf_r+0x18>
 8005ed8:	6a03      	ldr	r3, [r0, #32]
 8005eda:	b90b      	cbnz	r3, 8005ee0 <_vfiprintf_r+0x18>
 8005edc:	f7ff f986 	bl	80051ec <__sinit>
 8005ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ee2:	07d9      	lsls	r1, r3, #31
 8005ee4:	d405      	bmi.n	8005ef2 <_vfiprintf_r+0x2a>
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	059a      	lsls	r2, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_vfiprintf_r+0x2a>
 8005eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eee:	f7ff fa90 	bl	8005412 <__retarget_lock_acquire_recursive>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	071b      	lsls	r3, r3, #28
 8005ef6:	d501      	bpl.n	8005efc <_vfiprintf_r+0x34>
 8005ef8:	692b      	ldr	r3, [r5, #16]
 8005efa:	b99b      	cbnz	r3, 8005f24 <_vfiprintf_r+0x5c>
 8005efc:	4629      	mov	r1, r5
 8005efe:	4630      	mov	r0, r6
 8005f00:	f000 f938 	bl	8006174 <__swsetup_r>
 8005f04:	b170      	cbz	r0, 8005f24 <_vfiprintf_r+0x5c>
 8005f06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f08:	07dc      	lsls	r4, r3, #31
 8005f0a:	d504      	bpl.n	8005f16 <_vfiprintf_r+0x4e>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	b01d      	add	sp, #116	@ 0x74
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	0598      	lsls	r0, r3, #22
 8005f1a:	d4f7      	bmi.n	8005f0c <_vfiprintf_r+0x44>
 8005f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1e:	f7ff fa79 	bl	8005414 <__retarget_lock_release_recursive>
 8005f22:	e7f3      	b.n	8005f0c <_vfiprintf_r+0x44>
 8005f24:	2300      	movs	r3, #0
 8005f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f28:	2320      	movs	r3, #32
 8005f2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f32:	2330      	movs	r3, #48	@ 0x30
 8005f34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060e4 <_vfiprintf_r+0x21c>
 8005f38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f3c:	f04f 0901 	mov.w	r9, #1
 8005f40:	4623      	mov	r3, r4
 8005f42:	469a      	mov	sl, r3
 8005f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f48:	b10a      	cbz	r2, 8005f4e <_vfiprintf_r+0x86>
 8005f4a:	2a25      	cmp	r2, #37	@ 0x25
 8005f4c:	d1f9      	bne.n	8005f42 <_vfiprintf_r+0x7a>
 8005f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f52:	d00b      	beq.n	8005f6c <_vfiprintf_r+0xa4>
 8005f54:	465b      	mov	r3, fp
 8005f56:	4622      	mov	r2, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f7ff ffa2 	bl	8005ea4 <__sfputs_r>
 8005f60:	3001      	adds	r0, #1
 8005f62:	f000 80a7 	beq.w	80060b4 <_vfiprintf_r+0x1ec>
 8005f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f68:	445a      	add	r2, fp
 8005f6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 809f 	beq.w	80060b4 <_vfiprintf_r+0x1ec>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f80:	f10a 0a01 	add.w	sl, sl, #1
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	9307      	str	r3, [sp, #28]
 8005f88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f8e:	4654      	mov	r4, sl
 8005f90:	2205      	movs	r2, #5
 8005f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f96:	4853      	ldr	r0, [pc, #332]	@ (80060e4 <_vfiprintf_r+0x21c>)
 8005f98:	f7fa f91a 	bl	80001d0 <memchr>
 8005f9c:	9a04      	ldr	r2, [sp, #16]
 8005f9e:	b9d8      	cbnz	r0, 8005fd8 <_vfiprintf_r+0x110>
 8005fa0:	06d1      	lsls	r1, r2, #27
 8005fa2:	bf44      	itt	mi
 8005fa4:	2320      	movmi	r3, #32
 8005fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005faa:	0713      	lsls	r3, r2, #28
 8005fac:	bf44      	itt	mi
 8005fae:	232b      	movmi	r3, #43	@ 0x2b
 8005fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fba:	d015      	beq.n	8005fe8 <_vfiprintf_r+0x120>
 8005fbc:	9a07      	ldr	r2, [sp, #28]
 8005fbe:	4654      	mov	r4, sl
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f04f 0c0a 	mov.w	ip, #10
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fcc:	3b30      	subs	r3, #48	@ 0x30
 8005fce:	2b09      	cmp	r3, #9
 8005fd0:	d94b      	bls.n	800606a <_vfiprintf_r+0x1a2>
 8005fd2:	b1b0      	cbz	r0, 8006002 <_vfiprintf_r+0x13a>
 8005fd4:	9207      	str	r2, [sp, #28]
 8005fd6:	e014      	b.n	8006002 <_vfiprintf_r+0x13a>
 8005fd8:	eba0 0308 	sub.w	r3, r0, r8
 8005fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	9304      	str	r3, [sp, #16]
 8005fe4:	46a2      	mov	sl, r4
 8005fe6:	e7d2      	b.n	8005f8e <_vfiprintf_r+0xc6>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	1d19      	adds	r1, r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	9103      	str	r1, [sp, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bfbb      	ittet	lt
 8005ff4:	425b      	neglt	r3, r3
 8005ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8005ffa:	9307      	strge	r3, [sp, #28]
 8005ffc:	9307      	strlt	r3, [sp, #28]
 8005ffe:	bfb8      	it	lt
 8006000:	9204      	strlt	r2, [sp, #16]
 8006002:	7823      	ldrb	r3, [r4, #0]
 8006004:	2b2e      	cmp	r3, #46	@ 0x2e
 8006006:	d10a      	bne.n	800601e <_vfiprintf_r+0x156>
 8006008:	7863      	ldrb	r3, [r4, #1]
 800600a:	2b2a      	cmp	r3, #42	@ 0x2a
 800600c:	d132      	bne.n	8006074 <_vfiprintf_r+0x1ac>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	1d1a      	adds	r2, r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	9203      	str	r2, [sp, #12]
 8006016:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800601a:	3402      	adds	r4, #2
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060f4 <_vfiprintf_r+0x22c>
 8006022:	7821      	ldrb	r1, [r4, #0]
 8006024:	2203      	movs	r2, #3
 8006026:	4650      	mov	r0, sl
 8006028:	f7fa f8d2 	bl	80001d0 <memchr>
 800602c:	b138      	cbz	r0, 800603e <_vfiprintf_r+0x176>
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	eba0 000a 	sub.w	r0, r0, sl
 8006034:	2240      	movs	r2, #64	@ 0x40
 8006036:	4082      	lsls	r2, r0
 8006038:	4313      	orrs	r3, r2
 800603a:	3401      	adds	r4, #1
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006042:	4829      	ldr	r0, [pc, #164]	@ (80060e8 <_vfiprintf_r+0x220>)
 8006044:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006048:	2206      	movs	r2, #6
 800604a:	f7fa f8c1 	bl	80001d0 <memchr>
 800604e:	2800      	cmp	r0, #0
 8006050:	d03f      	beq.n	80060d2 <_vfiprintf_r+0x20a>
 8006052:	4b26      	ldr	r3, [pc, #152]	@ (80060ec <_vfiprintf_r+0x224>)
 8006054:	bb1b      	cbnz	r3, 800609e <_vfiprintf_r+0x1d6>
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	3307      	adds	r3, #7
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	3308      	adds	r3, #8
 8006060:	9303      	str	r3, [sp, #12]
 8006062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006064:	443b      	add	r3, r7
 8006066:	9309      	str	r3, [sp, #36]	@ 0x24
 8006068:	e76a      	b.n	8005f40 <_vfiprintf_r+0x78>
 800606a:	fb0c 3202 	mla	r2, ip, r2, r3
 800606e:	460c      	mov	r4, r1
 8006070:	2001      	movs	r0, #1
 8006072:	e7a8      	b.n	8005fc6 <_vfiprintf_r+0xfe>
 8006074:	2300      	movs	r3, #0
 8006076:	3401      	adds	r4, #1
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0c0a 	mov.w	ip, #10
 8006080:	4620      	mov	r0, r4
 8006082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006086:	3a30      	subs	r2, #48	@ 0x30
 8006088:	2a09      	cmp	r2, #9
 800608a:	d903      	bls.n	8006094 <_vfiprintf_r+0x1cc>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0c6      	beq.n	800601e <_vfiprintf_r+0x156>
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	e7c4      	b.n	800601e <_vfiprintf_r+0x156>
 8006094:	fb0c 2101 	mla	r1, ip, r1, r2
 8006098:	4604      	mov	r4, r0
 800609a:	2301      	movs	r3, #1
 800609c:	e7f0      	b.n	8006080 <_vfiprintf_r+0x1b8>
 800609e:	ab03      	add	r3, sp, #12
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	462a      	mov	r2, r5
 80060a4:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <_vfiprintf_r+0x228>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	4630      	mov	r0, r6
 80060aa:	f3af 8000 	nop.w
 80060ae:	4607      	mov	r7, r0
 80060b0:	1c78      	adds	r0, r7, #1
 80060b2:	d1d6      	bne.n	8006062 <_vfiprintf_r+0x19a>
 80060b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d405      	bmi.n	80060c6 <_vfiprintf_r+0x1fe>
 80060ba:	89ab      	ldrh	r3, [r5, #12]
 80060bc:	059a      	lsls	r2, r3, #22
 80060be:	d402      	bmi.n	80060c6 <_vfiprintf_r+0x1fe>
 80060c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060c2:	f7ff f9a7 	bl	8005414 <__retarget_lock_release_recursive>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	065b      	lsls	r3, r3, #25
 80060ca:	f53f af1f 	bmi.w	8005f0c <_vfiprintf_r+0x44>
 80060ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d0:	e71e      	b.n	8005f10 <_vfiprintf_r+0x48>
 80060d2:	ab03      	add	r3, sp, #12
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	462a      	mov	r2, r5
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <_vfiprintf_r+0x228>)
 80060da:	a904      	add	r1, sp, #16
 80060dc:	4630      	mov	r0, r6
 80060de:	f7ff fc7f 	bl	80059e0 <_printf_i>
 80060e2:	e7e4      	b.n	80060ae <_vfiprintf_r+0x1e6>
 80060e4:	0800652b 	.word	0x0800652b
 80060e8:	08006535 	.word	0x08006535
 80060ec:	00000000 	.word	0x00000000
 80060f0:	08005ea5 	.word	0x08005ea5
 80060f4:	08006531 	.word	0x08006531

080060f8 <__swbuf_r>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	460e      	mov	r6, r1
 80060fc:	4614      	mov	r4, r2
 80060fe:	4605      	mov	r5, r0
 8006100:	b118      	cbz	r0, 800610a <__swbuf_r+0x12>
 8006102:	6a03      	ldr	r3, [r0, #32]
 8006104:	b90b      	cbnz	r3, 800610a <__swbuf_r+0x12>
 8006106:	f7ff f871 	bl	80051ec <__sinit>
 800610a:	69a3      	ldr	r3, [r4, #24]
 800610c:	60a3      	str	r3, [r4, #8]
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	071a      	lsls	r2, r3, #28
 8006112:	d501      	bpl.n	8006118 <__swbuf_r+0x20>
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	b943      	cbnz	r3, 800612a <__swbuf_r+0x32>
 8006118:	4621      	mov	r1, r4
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f82a 	bl	8006174 <__swsetup_r>
 8006120:	b118      	cbz	r0, 800612a <__swbuf_r+0x32>
 8006122:	f04f 37ff 	mov.w	r7, #4294967295
 8006126:	4638      	mov	r0, r7
 8006128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	1a98      	subs	r0, r3, r2
 8006130:	6963      	ldr	r3, [r4, #20]
 8006132:	b2f6      	uxtb	r6, r6
 8006134:	4283      	cmp	r3, r0
 8006136:	4637      	mov	r7, r6
 8006138:	dc05      	bgt.n	8006146 <__swbuf_r+0x4e>
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f7ff fdf3 	bl	8005d28 <_fflush_r>
 8006142:	2800      	cmp	r0, #0
 8006144:	d1ed      	bne.n	8006122 <__swbuf_r+0x2a>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	3b01      	subs	r3, #1
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	701e      	strb	r6, [r3, #0]
 8006154:	6962      	ldr	r2, [r4, #20]
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	429a      	cmp	r2, r3
 800615a:	d004      	beq.n	8006166 <__swbuf_r+0x6e>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	07db      	lsls	r3, r3, #31
 8006160:	d5e1      	bpl.n	8006126 <__swbuf_r+0x2e>
 8006162:	2e0a      	cmp	r6, #10
 8006164:	d1df      	bne.n	8006126 <__swbuf_r+0x2e>
 8006166:	4621      	mov	r1, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f7ff fddd 	bl	8005d28 <_fflush_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	d0d9      	beq.n	8006126 <__swbuf_r+0x2e>
 8006172:	e7d6      	b.n	8006122 <__swbuf_r+0x2a>

08006174 <__swsetup_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4b29      	ldr	r3, [pc, #164]	@ (800621c <__swsetup_r+0xa8>)
 8006178:	4605      	mov	r5, r0
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	460c      	mov	r4, r1
 800617e:	b118      	cbz	r0, 8006188 <__swsetup_r+0x14>
 8006180:	6a03      	ldr	r3, [r0, #32]
 8006182:	b90b      	cbnz	r3, 8006188 <__swsetup_r+0x14>
 8006184:	f7ff f832 	bl	80051ec <__sinit>
 8006188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618c:	0719      	lsls	r1, r3, #28
 800618e:	d422      	bmi.n	80061d6 <__swsetup_r+0x62>
 8006190:	06da      	lsls	r2, r3, #27
 8006192:	d407      	bmi.n	80061a4 <__swsetup_r+0x30>
 8006194:	2209      	movs	r2, #9
 8006196:	602a      	str	r2, [r5, #0]
 8006198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	e033      	b.n	800620c <__swsetup_r+0x98>
 80061a4:	0758      	lsls	r0, r3, #29
 80061a6:	d512      	bpl.n	80061ce <__swsetup_r+0x5a>
 80061a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061aa:	b141      	cbz	r1, 80061be <__swsetup_r+0x4a>
 80061ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d002      	beq.n	80061ba <__swsetup_r+0x46>
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7ff f94d 	bl	8005454 <_free_r>
 80061ba:	2300      	movs	r3, #0
 80061bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061c4:	81a3      	strh	r3, [r4, #12]
 80061c6:	2300      	movs	r3, #0
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f043 0308 	orr.w	r3, r3, #8
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	b94b      	cbnz	r3, 80061ee <__swsetup_r+0x7a>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e4:	d003      	beq.n	80061ee <__swsetup_r+0x7a>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f88b 	bl	8006304 <__smakebuf_r>
 80061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f2:	f013 0201 	ands.w	r2, r3, #1
 80061f6:	d00a      	beq.n	800620e <__swsetup_r+0x9a>
 80061f8:	2200      	movs	r2, #0
 80061fa:	60a2      	str	r2, [r4, #8]
 80061fc:	6962      	ldr	r2, [r4, #20]
 80061fe:	4252      	negs	r2, r2
 8006200:	61a2      	str	r2, [r4, #24]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	b942      	cbnz	r2, 8006218 <__swsetup_r+0xa4>
 8006206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800620a:	d1c5      	bne.n	8006198 <__swsetup_r+0x24>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	0799      	lsls	r1, r3, #30
 8006210:	bf58      	it	pl
 8006212:	6962      	ldrpl	r2, [r4, #20]
 8006214:	60a2      	str	r2, [r4, #8]
 8006216:	e7f4      	b.n	8006202 <__swsetup_r+0x8e>
 8006218:	2000      	movs	r0, #0
 800621a:	e7f7      	b.n	800620c <__swsetup_r+0x98>
 800621c:	20000064 	.word	0x20000064

08006220 <_raise_r>:
 8006220:	291f      	cmp	r1, #31
 8006222:	b538      	push	{r3, r4, r5, lr}
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	d904      	bls.n	8006234 <_raise_r+0x14>
 800622a:	2316      	movs	r3, #22
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	f04f 30ff 	mov.w	r0, #4294967295
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006236:	b112      	cbz	r2, 800623e <_raise_r+0x1e>
 8006238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800623c:	b94b      	cbnz	r3, 8006252 <_raise_r+0x32>
 800623e:	4628      	mov	r0, r5
 8006240:	f000 f830 	bl	80062a4 <_getpid_r>
 8006244:	4622      	mov	r2, r4
 8006246:	4601      	mov	r1, r0
 8006248:	4628      	mov	r0, r5
 800624a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800624e:	f000 b817 	b.w	8006280 <_kill_r>
 8006252:	2b01      	cmp	r3, #1
 8006254:	d00a      	beq.n	800626c <_raise_r+0x4c>
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	d103      	bne.n	8006262 <_raise_r+0x42>
 800625a:	2316      	movs	r3, #22
 800625c:	6003      	str	r3, [r0, #0]
 800625e:	2001      	movs	r0, #1
 8006260:	e7e7      	b.n	8006232 <_raise_r+0x12>
 8006262:	2100      	movs	r1, #0
 8006264:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006268:	4620      	mov	r0, r4
 800626a:	4798      	blx	r3
 800626c:	2000      	movs	r0, #0
 800626e:	e7e0      	b.n	8006232 <_raise_r+0x12>

08006270 <raise>:
 8006270:	4b02      	ldr	r3, [pc, #8]	@ (800627c <raise+0xc>)
 8006272:	4601      	mov	r1, r0
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f7ff bfd3 	b.w	8006220 <_raise_r>
 800627a:	bf00      	nop
 800627c:	20000064 	.word	0x20000064

08006280 <_kill_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	@ (80062a0 <_kill_r+0x20>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f7fb fe75 	bl	8001f7c <_kill>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d102      	bne.n	800629c <_kill_r+0x1c>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	b103      	cbz	r3, 800629c <_kill_r+0x1c>
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	200027b0 	.word	0x200027b0

080062a4 <_getpid_r>:
 80062a4:	f7fb be62 	b.w	8001f6c <_getpid>

080062a8 <_malloc_usable_size_r>:
 80062a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ac:	1f18      	subs	r0, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bfbc      	itt	lt
 80062b2:	580b      	ldrlt	r3, [r1, r0]
 80062b4:	18c0      	addlt	r0, r0, r3
 80062b6:	4770      	bx	lr

080062b8 <__swhatbuf_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	460c      	mov	r4, r1
 80062bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c0:	2900      	cmp	r1, #0
 80062c2:	b096      	sub	sp, #88	@ 0x58
 80062c4:	4615      	mov	r5, r2
 80062c6:	461e      	mov	r6, r3
 80062c8:	da0d      	bge.n	80062e6 <__swhatbuf_r+0x2e>
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062d0:	f04f 0100 	mov.w	r1, #0
 80062d4:	bf14      	ite	ne
 80062d6:	2340      	movne	r3, #64	@ 0x40
 80062d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062dc:	2000      	movs	r0, #0
 80062de:	6031      	str	r1, [r6, #0]
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	b016      	add	sp, #88	@ 0x58
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	466a      	mov	r2, sp
 80062e8:	f000 f848 	bl	800637c <_fstat_r>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	dbec      	blt.n	80062ca <__swhatbuf_r+0x12>
 80062f0:	9901      	ldr	r1, [sp, #4]
 80062f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062fa:	4259      	negs	r1, r3
 80062fc:	4159      	adcs	r1, r3
 80062fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006302:	e7eb      	b.n	80062dc <__swhatbuf_r+0x24>

08006304 <__smakebuf_r>:
 8006304:	898b      	ldrh	r3, [r1, #12]
 8006306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006308:	079d      	lsls	r5, r3, #30
 800630a:	4606      	mov	r6, r0
 800630c:	460c      	mov	r4, r1
 800630e:	d507      	bpl.n	8006320 <__smakebuf_r+0x1c>
 8006310:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	2301      	movs	r3, #1
 800631a:	6163      	str	r3, [r4, #20]
 800631c:	b003      	add	sp, #12
 800631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006320:	ab01      	add	r3, sp, #4
 8006322:	466a      	mov	r2, sp
 8006324:	f7ff ffc8 	bl	80062b8 <__swhatbuf_r>
 8006328:	9f00      	ldr	r7, [sp, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	4639      	mov	r1, r7
 800632e:	4630      	mov	r0, r6
 8006330:	f7ff f904 	bl	800553c <_malloc_r>
 8006334:	b948      	cbnz	r0, 800634a <__smakebuf_r+0x46>
 8006336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633a:	059a      	lsls	r2, r3, #22
 800633c:	d4ee      	bmi.n	800631c <__smakebuf_r+0x18>
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	f043 0302 	orr.w	r3, r3, #2
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	e7e2      	b.n	8006310 <__smakebuf_r+0xc>
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	6020      	str	r0, [r4, #0]
 800634e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800635a:	b15b      	cbz	r3, 8006374 <__smakebuf_r+0x70>
 800635c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006360:	4630      	mov	r0, r6
 8006362:	f000 f81d 	bl	80063a0 <_isatty_r>
 8006366:	b128      	cbz	r0, 8006374 <__smakebuf_r+0x70>
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	431d      	orrs	r5, r3
 8006378:	81a5      	strh	r5, [r4, #12]
 800637a:	e7cf      	b.n	800631c <__smakebuf_r+0x18>

0800637c <_fstat_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	@ (800639c <_fstat_r+0x20>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	f7fb fe57 	bl	800203c <_fstat>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d102      	bne.n	8006398 <_fstat_r+0x1c>
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	b103      	cbz	r3, 8006398 <_fstat_r+0x1c>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	bf00      	nop
 800639c:	200027b0 	.word	0x200027b0

080063a0 <_isatty_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	@ (80063bc <_isatty_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb fe56 	bl	800205c <_isatty>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_isatty_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_isatty_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	200027b0 	.word	0x200027b0

080063c0 <_init>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr

080063cc <_fini>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr
